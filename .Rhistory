str(ar_stime)
nzero_achievement_rate = ar_stime[which(ar_stime$achievement_rate > 0), ]
nzero_done_second = ar_stime[which(ar_stime$done_second > 0), ]
high_ar = mean(nzero_achievement_rate$achievement_rate) + sd(nzero_achievement_rate$achievement_rate) * 2
low_ar = mean(nzero_achievement_rate$achievement_rate) - sd(nzero_achievement_rate$achievement_rate) * 2
if(low_ar < 0){
low_ar = 0
}
r_nzero_achievement_rate = nzero_achievement_rate[which(nzero_achievement_rate$achievement_rate > low_ar & nzero_achievement_rate$achievement_rate < high_ar), ]
plot <- ggplot(r_nzero_achievement_rate, aes(achievement_rate)) +
geom_histogram(aes(y=..density..),
binwidth = 2.5,
colour="black", fill="white") +
geom_density(alpha=.2, fill="#6666FF")
plot
seconds_to_period(mean(nzero_done_second$done_second))
high = mean(nzero_done_second$done_second) + sd(nzero_done_second$done_second) * 2
low = mean(nzero_done_second$done_second) - sd(nzero_done_second$done_second) * 2
r_nzero_done_second = nzero_done_second[which(nzero_done_second$done_second > low & nzero_done_second$done_second < high), ]
View(r_nzero_done_second)
plot <- ggplot(r_nzero_done_second, aes(done_second)) +
geom_histogram(aes(y=..density..),
binwidth = 1000,
colour="black", fill="white") +
geom_density(alpha=.2, fill="#6666FF")
plot
sd(nzero_done_second$done_second)
seconds_to_preiod(sd(nzero_done_second$done_second))
seconds_to_period(sd(nzero_done_second$done_second))
ar_stime <- preprocess(jy_stime)
View(jy_stime)
str(jy_stime)
nzero_achievement_rate = jy_stime[which(jy_stime$achievement_rate > 0), ]
nzero_done_second = jy_stime[which(jy_stime$done_second > 0), ]
seconds_to_period(mean(nzero_done_second$done_second))
high = mean(nzero_done_second$done_second) + sd(nzero_done_second$done_second) * 2
low = mean(nzero_done_second$done_second) - sd(nzero_done_second$done_second) * 2
r_nzero_done_second = nzero_done_second[which(nzero_done_second$done_second > low & nzero_done_second$done_second < high), ]
plot <- ggplot(r_nzero_done_second, aes(done_second)) +
geom_histogram(aes(y=..density..),
binwidth = 1000,
colour="black", fill="white") +
geom_density(alpha=.2, fill="#6666FF")
plot
seconds_to_period(sd(nzero_done_second$done_second))
View(jy_stime)
ar_stime <- preprocess(ar_stime)
View(ar_stime)
jk_stime <- read_csv("~/work/datascience/Untitled Folder 1/jk_stime.csv")
jy_stime <- read_csv("~/work/datascience/Untitled Folder 1/jy_stime.csv")
ar_stime <- read_csv("~/work/datascience/Untitled Folder 1/ar_stime.csv")
ar_stime <- preprocess(ar_stime)
View(ar_stime)
p1 <- ggplot(data = data.frame(x = c(0, 100)), aes(x)) +
stat_function(fun = dnorm, n = 100, args = list(mean = 50, sd = 35)) +
labs(y = "", title = "sd: 35") +
coord_cartesian(ylim=c(0, 0.03))
Sys.setlocale(category = "LC_CTYPE", locale = "ko_KR.UTF-8")
theme_set(theme_gray(base_family="AppleGothic"))
par(family = "AppleGothic")
install.packages("ggplot2")
library(ggplot2)
library(gridExtra)
Sys.setlocale(category = "LC_CTYPE", locale = "ko_KR.UTF-8")
theme_set(theme_gray(base_family="AppleGothic"))
par(family = "AppleGothic")
p1 <- ggplot(data = data.frame(x = c(0, 100)), aes(x)) +
stat_function(fun = dnorm, n = 100, args = list(mean = 50, sd = 35)) +
labs(y = "", title = "sd: 35") +
coord_cartesian(ylim=c(0, 0.03))
p2 <- ggplot(data = data.frame(x = c(0, 100)), aes(x)) +
stat_function(fun = dnorm, n = 100, args = list(mean = 50, sd = 15)) +
labs(y = "", title = "sd: 15") +
coord_cartesian(ylim=c(0, 0.03))
grid.arrange(p1, p2, nrow=1, ncol=2)
p1 <- ggplot(data = data.frame(x = c(0, 100)), aes(x)) +
stat_function(fun = dnorm, n = 100, args = list(mean = 50, sd = 35)) +
labs(y = "", title = "sd: 35") +
coord_cartesian(ylim=c(0, 0.03)) +
ggplot(data = data.frame(x = c(0, 100)), aes(x)) +
stat_function(fun = dnorm, n = 100, args = list(mean = 50, sd = 15)) +
labs(y = "", title = "sd: 15") +
coord_cartesian(ylim=c(0, 0.03))
p1 <- ggplot(data = data.frame(x = c(0, 100)), aes(x)) +
stat_function(fun = dnorm, n = 100, args = list(mean = 50, sd = 35)) +
labs(y = "", title = "sd: 35") +
coord_cartesian(ylim=c(0, 0.03)) +
stat_function(fun = dnorm, n = 100, args = list(mean = 50, sd = 15)) +
labs(y = "", title = "sd: 15") +
coord_cartesian(ylim=c(0, 0.03))
p1 <- ggplot(data = data.frame(x = c(0, 100)), aes(x)) +
stat_function(fun = dnorm, n = 100, args = list(mean = 50, sd = 35)) +
labs(y = "", title = "sd: 35") +
coord_cartesian(ylim=c(0, 0.03)) +
stat_function(fun = dnorm, n = 100, args = list(mean = 50, sd = 15)) +
p2 <- ggplot(data = data.frame(x = c(0, 100)), aes(x)) +
stat_function(fun = dnorm, n = 100, args = list(mean = 50, sd = 15)) +
labs(y = "", title = "sd: 15") +
coord_cartesian(ylim=c(0, 0.03))
p1 <- ggplot(data = data.frame(x = c(0, 100)), aes(x)) +
stat_function(fun = dnorm, n = 100, args = list(mean = 50, sd = 35)) +
labs(y = "", title = "sd: 35") +
coord_cartesian(ylim=c(0, 0.03)) +
stat_function(fun = dnorm, n = 100, args = list(mean = 50, sd = 15))
grid.arrange(p1, p2, nrow=1, ncol=2)
p1 <- ggplot(data = data.frame(x = c(0, 100)), aes(x)) +
stat_function(fun = dnorm, n = 100, args = list(mean = 50, sd = 35)) +
labs(y = "", title = "표준편차a < 표준편차b") +
coord_cartesian(ylim=c(0, 0.03)) +
stat_function(fun = dnorm, n = 100, args = list(mean = 50, sd = 15))
p2 <- ggplot(data = data.frame(x = c(0, 100)), aes(x)) +
stat_function(fun = dnorm, n = 100, args = list(mean = 50, sd = 25)) +
labs(y = "", title = "sd: 15") +
coord_cartesian(ylim=c(0, 0.03)) +
stat_function(fun = dnorm, n = 100, args = list(mean = 80, sd = 25))
grid.arrange(p1, p2, nrow=1, ncol=2)
p1 <- ggplot(data = data.frame(x = c(0, 100)), aes(x)) +
stat_function(fun = dnorm, n = 100, args = list(mean = 50, sd = 35)) +
labs(y = "", title = "표준편차a < 표준편차b") +
stat_function(fun = dnorm, n = 100, args = list(mean = 50, sd = 15))
p2 <- ggplot(data = data.frame(x = c(0, 100)), aes(x)) +
stat_function(fun = dnorm, n = 100, args = list(mean = 50, sd = 25)) +
labs(y = "", title = "sd: 15") +
stat_function(fun = dnorm, n = 100, args = list(mean = 80, sd = 25))
grid.arrange(p1, p2, nrow=1, ncol=2)
p1 <- ggplot(data = data.frame(x = c(0, 100)), aes(x)) +
stat_function(fun = dnorm, n = 100, args = list(mean = 50, sd = 35)) +
labs(y = "", title = "평균은 같고 표준편차가 다를때") +
stat_function(fun = dnorm, n = 100, args = list(mean = 50, sd = 15))
p2 <- ggplot(data = data.frame(x = c(0, 100)), aes(x)) +
stat_function(fun = dnorm, n = 100, args = list(mean = 50, sd = 25)) +
labs(y = "", title = "표준편차가 다르고 평균이 같을때") +
stat_function(fun = dnorm, n = 100, args = list(mean = 80, sd = 25))
grid.arrange(p1, p2, nrow=1, ncol=2)
ggplot(data.frame(x=c(-3,3)), aes(x=x)) +
stat_function(fun=dnorm, colour="blue", size=1) +
ggtitle("Normal Distribution")
dnorm_range <- function(x) {
y <- dnorm(x)
y[x < -1.96 | x > 1.96] <- NA  # 이 범위에는 색깔 없음
return(y)
}
ggplot(data.frame(x=c(-3,3)), aes(x=x)) +
stat_function(fun=dnorm, colour="blue", size=1) +
stat_function(fun=dnorm_range, geom = "area", fill="grey", alpha = 0.5) +
ggtitle("Normal Distribution")
runif(1)
runif(1)
runif(1)
runif(1)
runif(1)
sample(x=c(0,1), size = 100)
sample(x=2, size = 100)
sample(x=1:30, size = 100)
sample(x=1:30, size = 100, replace = TRUE)
sample(x=0:1, size = 100, replace = TRUE)
sample(x=c(0:1), size = 100, replace = TRUE)
flip_coin <- sample(x=c(0:1), size = 100, replace = TRUE)
mean(flip_coin)
flip_coin <- sample(x=c(0:1), size = 100, replace = TRUE)
flip_coin
mean(flip_coin)
flip_coin <- sample(x=c(0:1), size = 1000, replace = TRUE)
flip_coin
mean(flip_coin)
flip_coin <- sample(x=c(0:1), size = 1000, replace = TRUE)
flip_coin
mean(flip_coin)
flip_coin <- sample(x=c(0:1), size = 5, replace = TRUE)
flip_coin
mean(flip_coin)
flip_coin <- sample(x=c(0:1), size = 1, replace = TRUE)
flip_coin
mean(flip_coin)
flip_coin <- sample(x=c(0:1), size = 3, replace = TRUE)
flip_coin
mean(flip_coin)
flip_coin <- sample(x=c(0:1), size = 3, replace = TRUE)
flip_coin
mean(flip_coin)
flip_coin <- sample(x=c(0:1), size = 3, replace = TRUE)
flip_coin
mean(flip_coin)
flip_coin <- sample(x=c(0:1), size = 3, replace = TRUE)
flip_coin
mean(flip_coin)
l <- c()
for(x in 1:1000){
flip_coin <- sample(x=c(0:1), size = x, replace = TRUE)
l <- c(l, mean(flip_coin))
}
l
library(ggplot2)
library(gridExtra)
histogram <- ggplot(aes(l))
histogram <- ggplot(l, aes(l))
histogram <- ggplot(data.frame(x = l), aes(x))
histogram + geom_histogram(
binwidth = 1000,
colour="black", fill="blue", alpha = 0.5) +
geom_density(alpha=.2, fill="#6666FF")
histogram <- ggplot(data.frame(x = l), aes(x))
histogram + geom_histogram()
for(x in 1:10000){
flip_coin <- sample(x=c(0:1), size = x, replace = TRUE)
l <- c(l, mean(flip_coin))
}
histogram <- ggplot(data.frame(x = l), aes(x))
histogram + geom_histogram()
histogram <- ggplot(data.frame(x = l), aes(x))
histogram + geom_histogram(binwidth = 0.1,
colour="black", fill="blue", alpha = 0.5) +
geom_density(alpha=.2, fill="#6666FF")
histogram <- ggplot(data.frame(x = l), aes(x))
histogram + geom_histogram(binwidth = 0.025,
colour="black", fill="blue", alpha = 0.5) +
geom_density(alpha=.2, fill="#6666FF")
histogram <- ggplot(data.frame(x = l), aes(x))
histogram + geom_histogram(binwidth = 0.001,
colour="black", fill="blue", alpha = 0.5) +
geom_density(alpha=.2, fill="#6666FF")
histogram <- ggplot(data.frame(x = l), aes(x))
histogram + geom_histogram(binwidth = 0.02,
colour="black", fill="blue", alpha = 0.5) +
geom_density(alpha=.2, fill="#6666FF")
histogram <- ggplot(data.frame(x = l), aes(x))
histogram + geom_histogram(binwidth = 0.02,
colour="black", fill="blue", alpha = 0.5)
for(x in 1:1000){
flip_coin <- sample(x=c(0:1), size = x, replace = TRUE)
l <- c(l, mean(flip_coin))
}
histogram <- ggplot(data.frame(x = l), aes(x))
histogram + geom_histogram(binwidth = 0.02,
colour="black", fill="blue", alpha = 0.5)
for(x in 1:10){
flip_coin <- sample(x=c(0:1), size = x, replace = TRUE)
l <- c(l, mean(flip_coin))
}
histogram <- ggplot(data.frame(x = l), aes(x))
histogram + geom_histogram(binwidth = 0.02,
colour="black", fill="blue", alpha = 0.5)
l <- c()
for(x in 1:10){
flip_coin <- sample(x=c(0:1), size = x, replace = TRUE)
l <- c(l, mean(flip_coin))
}
histogram <- ggplot(data.frame(x = l), aes(x))
histogram + geom_histogram(binwidth = 0.02,
colour="black", fill="blue", alpha = 0.5)
l <- c()
for(x in 1:100){
flip_coin <- sample(x=c(0:1), size = x, replace = TRUE)
l <- c(l, mean(flip_coin))
}
histogram <- ggplot(data.frame(x = l), aes(x))
histogram + geom_histogram(binwidth = 0.02,
colour="black", fill="blue", alpha = 0.5)
l <- c()
for(x in 1:1000){
flip_coin <- sample(x=c(0:1), size = x, replace = TRUE)
l <- c(l, mean(flip_coin))
}
histogram <- ggplot(data.frame(x = l), aes(x))
histogram + geom_histogram(binwidth = 0.02,
colour="black", fill="blue", alpha = 0.5)
l <- c()
yy <- c()
for(x in 1:1000){
flip_coin <- sample(x=c(0:1), size = x, replace = TRUE)
l <- c(l, mean(flip_coin))
yy <- c(yy, x)
}
for(x in 1:10){
flip_coin <- sample(x=c(0:1), size = x, replace = TRUE)
l <- c(l, mean(flip_coin))
yy <- c(yy, x)
}
histogram <- ggplot(data.frame(x = l), aes(x))
histogram + geom_histogram(binwidth = 0.02,
colour="black", fill="blue", alpha = 0.5)
l <- c()
yy <- c()
for(x in 1:10){
flip_coin <- sample(x=c(0:1), size = x, replace = TRUE)
l <- c(l, mean(flip_coin))
yy <- c(yy, x)
}
histogram <- ggplot(data.frame(x = l), aes(x))
histogram + geom_histogram(binwidth = 0.02,
colour="black", fill="blue", alpha = 0.5)
lineplot <- ggplot(data.frame(x = l, y = yy), aes(x, y))
lineplot <- ggplot(data.frame(x = yy, y = x), aes(x, y))
lineplot + geom_line()
lineplot <- ggplot(data.frame(x = yy, y = l), aes(x, y))
lineplot + geom_line()
l <- c()
yy <- c()
for(x in 1:100){
flip_coin <- sample(x=c(0:1), size = x, replace = TRUE)
l <- c(l, mean(flip_coin))
yy <- c(yy, x)
}
histogram <- ggplot(data.frame(x = l), aes(x))
histogram + geom_histogram(binwidth = 0.02,
colour="black", fill="blue", alpha = 0.5)
lineplot <- ggplot(data.frame(x = yy, y = l), aes(x, y))
lineplot + geom_line()
l <- c()
yy <- c()
for(x in 1:1000){
flip_coin <- sample(x=c(0:1), size = x, replace = TRUE)
l <- c(l, mean(flip_coin))
yy <- c(yy, x)
}
histogram <- ggplot(data.frame(x = l), aes(x))
histogram + geom_histogram(binwidth = 0.02,
colour="black", fill="blue", alpha = 0.5)
lineplot <- ggplot(data.frame(x = yy, y = l), aes(x, y))
lineplot + geom_line()
function <- flip_coin(n) {
l <- c()
yy <- c()
for(x in 1:n){
flip_coin <- sample(x=c(0:1), size = x, replace = TRUE)
l <- c(l, mean(flip_coin))
yy <- c(yy, x)
}
histogram <- ggplot(data.frame(x = l), aes(x))
histogram + geom_histogram(binwidth = 0.02,
colour="black", fill="blue", alpha = 0.5)
lineplot <- ggplot(data.frame(x = yy, y = l), aes(x, y))
lineplot + geom_line()
grid.arrange(histogram, lineplot, nrow=2, ncol=1)
}
function <- flip_coin(n) {
l <- c()
yy <- c()
for(x in 1:n){
flip_coin <- sample(x=c(0:1), size = x, replace = TRUE)
l <- c(l, mean(flip_coin))
yy <- c(yy, x)
}
histogram <- ggplot(data.frame(x = l), aes(x))
histogram + geom_histogram(binwidth = 0.02,
colour="black", fill="blue", alpha = 0.5)
lineplot <- ggplot(data.frame(x = yy, y = l), aes(x, y))
lineplot + geom_line()
grid.arrange(histogram, lineplot, nrow=2, ncol=1)
}
function <- flip_coin(n) {
l <- c()
yy <- c()
for(x in 1:n){
flip_coin <- sample(x=c(0:1), size = x, replace = TRUE)
l <- c(l, mean(flip_coin))
yy <- c(yy, x)
}
histogram <- ggplot(data.frame(x = l), aes(x)) +
geom_histogram(binwidth = 0.02,
colour="black", fill="blue", alpha = 0.5)
lineplot <- ggplot(data.frame(x = yy, y = l), aes(x, y)) +geom_line()
return(histogram, lineplot)
}
function <- flip_coin(n) {
l <- c()
yy <- c()
for(x in 1:n){
flip_coin <- sample(x=c(0:1), size = x, replace = TRUE)
l <- c(l, mean(flip_coin))
yy <- c(yy, x)
}
histogram <- ggplot(data.frame(x = l), aes(x)) +
geom_histogram(binwidth = 0.02,
colour="black", fill="blue", alpha = 0.5)
lineplot <- ggplot(data.frame(x = yy, y = l), aes(x, y)) +geom_line()
return(c(histogram, lineplot))
}
flip_coin <- function(n) {
l <- c()
yy <- c()
for(x in 1:n){
flip_coin <- sample(x=c(0:1), size = x, replace = TRUE)
l <- c(l, mean(flip_coin))
yy <- c(yy, x)
}
histogram <- ggplot(data.frame(x = l), aes(x)) +
geom_histogram(binwidth = 0.02,
colour="black", fill="blue", alpha = 0.5)
lineplot <- ggplot(data.frame(x = yy, y = l), aes(x, y)) +geom_line()
return(c(histogram, lineplot))
}
flip_coin_sample <- flip_coin(100)
flip_coin_sample
flip_coin_sample[0]
flip_coin_sample[1]
grid.arrange(flip_coin_sample[1], flip_coin_sample[2], nrow=2, ncol=1)
flip_coin <- function(n) {
l <- c()
yy <- c()
for(x in 1:n){
flip_coin <- sample(x=c(0:1), size = x, replace = TRUE)
l <- c(l, mean(flip_coin))
yy <- c(yy, x)
}
histogram <- ggplot(data.frame(x = l), aes(x)) +
geom_histogram(binwidth = 0.02,
colour="black", fill="blue", alpha = 0.5)
lineplot <- ggplot(data.frame(x = yy, y = l), aes(x, y)) + geom_line()
grid.arrange(histogram, lineplot, nrow=2, ncol=1)
}
flip_coin(100)
flip_coin(10)
flip_coin(50)
flip_coin(10)
flip_coin(50)
flip_coin(100)
flip_coin(1000)
flip_coin(10000)
flip_coin <- function(n) {
l <- c()
yy <- c()
for(x in 1:n){
flip_coin <- sample(x=c(0:1), size = x, replace = TRUE)
l <- c(l, mean(flip_coin))
yy <- c(yy, x)
}
histogram <- ggplot(data.frame(x = l), aes(x)) +
geom_histogram(binwidth = 0.02,
colour="black", fill="blue", alpha = 0.5) +
coord_cartesian(xlim=c(0, 1))
lineplot <- ggplot(data.frame(x = yy, y = l), aes(x, y)) + geom_line()
grid.arrange(histogram, lineplot, nrow=2, ncol=1)
}
flip_coin(10)
flip_coin(50)
flip_coin(100)
flip_coin(1000)
flip_coin(10000)
flip_coin(10)
flip_coin(1000)
sum(y)
x <- c(10000, 1000, 100, 1, 0)
y <- c(1, 5, 15, 180, 99799)
sum(y)
x * y
(x * y) / sum(y)
sum(x * y) / sum(y)
library(car)
library(boot)
library(QuantPsyc)
library(ggplot2)
library(gridExtra)
library(truncnorm)
setwd("~/work/statistics-r/")
Sys.setlocale(category = "LC_CTYPE", locale = "ko_KR.UTF-8")
theme_set(theme_gray(base_family="AppleGothic"))
par(family = "AppleGothic")
head(album2)
album2 <- read.csv("./data/Album Sales 2.csv", header = TRUE)
head(album2)
summary(album2)
albumSales.lm2 <- lm(sales ~ adverts, data = album2)
albumSales.lm3 <- lm(sales ~ adverts + airplay + attract, data = album2)
summary(albumSales.lm2)
summary(albumSales.lm3)
albumSales.lm3 <- update(albumSales.lm2, .~. + airplay + attract)
summary(albumSales.lm3)
steins_r_squared <- function(n, k, R_2) {
return(( 1 - ( ((n-1) / (n-k-1)) * ((n-2) / (n-k-2)) * ((n+1) / (n))   ) ) * (1 - R_2))
}
summary(album2)
str(album2)
steins_r_squared(200, 3, 0.6447)
steins_r_squared <- function(n, k, R_2) {
return( 1 - (( ((n-1) / (n-k-1)) * ((n-2) / (n-k-2)) * ((n+1) / (n))   )  * (1 - R_2)))
}
steins_r_squared(200, 3, 0.6447)
steins_r_squared(200, 3, 0.645)
steins_r_squared(200, 3, 0.6447)
summary(albumSales.lm3)
steins_r_squared(200, 3, 0.6447)
steins_r_squared(200, 3, 0.6647)
lm.beta(albumSales.lm3)
confint(albumSales.lm3)
albumSales.lm4 <- lm(sales ~ attract + adverts + airplay, data = album2)
summary(albumSales.lm3)
summary(albumSales.lm4)
summary(albumSales.lm2)
summary(albumSales.lm3)
F_chnage <- function(n, k2, k_change, R2_2, R2_2_change) {
return( ((n - k2 - 1) * R2_2_change) / (k_change * (1 - R2_2))   )
}
F_chnage(200, 3, 2, 0.330, 0.6646)
F_chnage(200, 3, 2, 0.330, 0.664668)
(196 * 0.330) / (2 * (1 - 0.6646))
(196 * 0.330) / (2 * (1 - 0.6647))
F_chnage(200, 3, 2, 0.6647, 0.330)
pf(F_chnage(200, 3, 2, 0.6647, 0.330), 2, 196)
pf(q = F_chnage(200, 3, 2, 0.6647, 0.330), df1 = 2, df2 = 196)
pf(q = F_chnage(200, 3, 2, 0.6647, 0.330), df2 = 2, df1 = 196)
1 - pf(q = F_chnage(200, 3, 2, 0.6647, 0.330), df2 = 2, df1 = 196)
F_chnage(200, 3, 2, 0.6647, 0.330)
F_change <- function(n, k2, k_change, R2_2, R2_2_change) {
return( ( (n - k2 - 1) * R2_2_change ) / ( k_change * (1 - R2_2) )   )
}
F_change(200, 3, 2, 0.6647, 0.330)
pf(2, 196)
pf(F_change(200, 3, 2, 0.6647, 0.330), 2, 196)
1 - pf(F_change(200, 3, 2, 0.6647, 0.330), 2, 196)
pf(F_change(200, 3, 2, 0.6647, 0.330), 2, 196, lower.tail = FALSE)
anova(albumSales.lm2, albumSales.lm3)
