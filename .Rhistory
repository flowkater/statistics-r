c(1, 2, 3, 4, 6)
c(1, 2, 3, 4, 5)
metallica <- c("Lars", "James", "Jason", "Kirk")
metallica <- metallica[metallica != "Jason"]
metallica
metallica <- c(metallica, "Rob")
metallica
name <- ("1", 1)
name <- c("1", 1)
name <- c("1", 1)
name
name <- c(1, 1)
name
name <- [1, 2, 3]
name <- (1, 2)
name <- [1, 2, "asd"]
library(ggplot2)
library(gridExtra)
Sys.setlocale(category = "LC_CTYPE", locale = "ko_KR.UTF-8")
theme_set(theme_gray(base_family="AppleGothic"))
par(family = "AppleGothic")
### 도수 분포 (frequency distribution; 빈도 분포) / 히스토그램(histogram)
StudyTime <- read.csv("./data/study_time.csv", header = TRUE)
setwd("~/work/statistics-R/")
### 도수 분포 (frequency distribution; 빈도 분포) / 히스토그램(histogram)
StudyTime <- read.csv("./data/study_time.csv", header = TRUE)
View(StudyTime)
histogram <- ggplot(StudyTime, aes(done_second))
histogram + geom_histogram(
binwidth = 1000,
colour="black", fill="blue", alpha = 0.5)
ggplot(data = data.frame(x = rnorm(100, 50, 25)), aes(x)) +
geom_histogram(aes(y=..density..),
binwidth = 5,
colour="black", fill="white") +
geom_density(alpha=.2, fill="#6666FF")
### 정규 분포 (normal distribution)
ggplot(data = data.frame(x = c(0, 100)), aes(x)) +
stat_function(fun = dnorm, n = 100, args = list(mean = 50, sd = 25))
positive_skewed <- ggplot(data = data.frame(x = c(0, 200)), aes(x)) +
stat_function(fun = dnorm, n = 100, args = list(mean = 50, sd = 25)) +
coord_cartesian(ylim=c(0, 0.02)) +
labs(y = "", title = "positive_skewed")
negative_skewed <- ggplot(data = data.frame(x = c(0, 200)), aes(x)) +
stat_function(fun = dnorm, n = 100, args = list(mean = 150, sd = 25)) +
coord_cartesian(ylim=c(0, 0.02)) +
labs(y = "", title = "egative_skewed")
leptokurtic <- ggplot(data = data.frame(x = c(0, 100)), aes(x)) +
stat_function(fun = dnorm, n = 100, args = list(mean = 50, sd = 30)) +
coord_cartesian(ylim=c(0, 0.03)) +
labs(y = "", title = "leptokurtic")
platykurtic <- ggplot(data = data.frame(x = c(0, 100)), aes(x)) +
stat_function(fun = dnorm, n = 100, args = list(mean = 50, sd = 15)) +
coord_cartesian(ylim=c(0, 0.03)) +
labs(y = "", title = "platykurtic")
grid.arrange(positive_skewed, negative_skewed, leptokurtic, platykurtic, nrow=2, ncol=2)
# Creating data
my_variable=c(rnorm(1000 , 0 , 2) , rnorm(1000 , 9 , 2))
# Layout to split the screen
layout(mat = matrix(c(1,2),2,1, byrow=TRUE),  height = c(1,8))
# Draw the boxplot and the histogram
par(mar=c(0, 3.1, 1.1, 2.1))
boxplot(my_variable , horizontal=TRUE , ylim=c(-10,20), xaxt="n" , col=rgb(0.8,0.8,0,0.5) , frame=F)
par(mar=c(4, 3.1, 1.1, 2.1))
hist(my_variable , breaks=40 , col=rgb(0.2,0.8,0.5,0.5) , border=F , main="" , xlab="value of the variable", xlim=c(-10,20))
# mode 최빈값
names(which.max(table(c(1, 2, 2, 2, 3))))
# mode 최빈값
names(which.max(table(c(1, 2, 2, 2, 3))))
produce101 <- read.csv("./data/produce101.csv", header = TRUE)
View(produce101)
# 오름차순 정렬
sort(produce101$score)
mean(produce101$score)
median(produce101$score)
min(produce101$score)
max(produce101$score)
summary
summary(produce101$score)
par(mfrow=c(1,2))
hist(produce101$score)
boxplot(produce101$score)
var(produce101$score)
sd(produce101$score)
test_score <- c(6, 10, 15, 18, 19, 22)
same_index <- c(1, 1, 1, 1, 1, 1)
par(mfrow=c(2,2))
plot(test_score, same_index, col = "blue", cex = 5, pch = 19)
mean(test_score)
sd(test_score)
test_score_10 = test_score + 10
mean(test_score_10)
sd(test_score_10)
plot(test_score_10, same_index, col = "blue", cex = 5, pch = 19)
test_score_x2 = test_score * 2
test_score_x2
mean(test_score_x2)
sd(test_score_x2)
plot(test_score_x2, same_index, col = "blue", cex = 5, pch = 19)
## Centering
test_score_mean = test_score - mean(test_score)
test_score_mean
mean(test_score_mean)
sd(test_score_mean)
plot(test_score_mean, same_index, col = "blue", cex = 5, pch = 19)
sd(test_score_x2)
## Scaling
test_score_mean_sd = test_score_mean / sd(test_score)
test_score_mean_sd
mean(test_score_mean_sd)
sd(test_score_mean_sd)
plot(test_score_mean_sd, same_index, col = "blue", cex = 5, pch = 19)
## 수능 수리가형 점수
## 2011년 불수능 평균 = 47.8, 표준편차 = 19.7
## 2015년 물수능 평균 = 55.4, 표준편차 = 28.5
## 80 점을 받은 A 학생, 100점을 B 학생 승자는?
A_standard = (80 - 47.8) / 19.7
A_standard
B_standard = (100 - 55.4) / 28.5
B_standard
A_standard > B_standard
koreanSat <- read.csv("./data/korean_sat.csv", header = TRUE)
koreanSat$year <- factor(koreanSat$year, levels = c(2011, 2015), labels = c("2011", "2015"))
ggplot(koreanSat, aes(x = score, fill = year,colour = year)) +
geom_histogram(alpha = 0.4, position="dodge") +
ggtitle("불수능 2011년 vs 물수능 2015년")
user_ids <- c(1, 2, 3, 4, 5)
friends <- c(1, 2, 3, 3, 4)
snsData <- data.frame(Id = user_ids, FriendNumber = friends)
View(snsData)
mean(snsData$FriendNumber)
deviance <- ggplot(snsData, aes(snsData$Id, snsData$FriendNumber))
deviance + geom_point(colour = "Blue", size = 5) +
geom_hline(yintercept = mean(snsData$FriendNumber)) +
geom_segment(aes(xend = snsData$Id, yend = mean(snsData$FriendNumber), alpha = 0.5, colour = "Red", size = 0.5)) +
labs(x = "User Id", y = "# of Friends", title = paste("sd: ", sd(snsData$FriendNumber))) +
theme(legend.position = "none")
errors = snsData$FriendNumber - mean(snsData$FriendNumber)
errors
round(sum(errors))
round(sum(errors))
var(snsData$FriendNumber)
sd(snsData$FriendNumber)
friends2 <- c(2, 3, 3, 3, 2)
friends3 <- c(4, 1, 5, 1, 2)
snsData2 <- data.frame(Id = user_ids, FriendNumber = friends2)
mean(snsData2$FriendNumber)
snsData3 <- data.frame(Id = user_ids, FriendNumber = friends3)
mean(snsData3$FriendNumber)
deviance2 <- ggplot(snsData2, aes(snsData2$Id, snsData2$FriendNumber)) +
geom_point(colour = "Blue", size = 5) +
geom_hline(yintercept = mean(snsData2$FriendNumber)) +
geom_segment(aes(xend = snsData2$Id, yend = mean(snsData2$FriendNumber), alpha = 0.5, colour = "Red", size = 0.5)) +
labs(x = "User Id", y = "# of Friends", title = paste("sd: ", sd(snsData2$FriendNumber))) +
coord_cartesian(ylim=c(0, 5)) +
theme(legend.position = "none")
deviance3 <- ggplot(snsData3, aes(snsData3$Id, snsData3$FriendNumber)) +
geom_point(colour = "Blue", size = 5) +
geom_hline(yintercept = mean(snsData3$FriendNumber)) +
geom_segment(aes(xend = snsData3$Id, yend = mean(snsData3$FriendNumber), alpha = 0.5, colour = "Red", size = 0.5)) +
labs(x = "User Id", y = "# of Friends", title = paste("sd: ", sd(snsData3$FriendNumber))) +
coord_cartesian(ylim=c(0, 5)) +
theme(legend.position = "none")
grid.arrange(deviance2, deviance3, nrow=1, ncol=2)
y = c(0.7, -1.6, -0.2, -1.2, -0.1, 3.4, 3.7, 0.8, 0.0, 2.0)
summary(y)
sd(y)
par(mfrow=c(2,2))
hist(y)
boxplot(y)
qqnorm(y); qqline(y)
hist(y, prob=TRUE)
lines(density(y), lty=2)
t.test(y)
t.test(y, alternative = "greater")
curve(dnorm(x, 0, sd(y)), -4, 4)
options(digits = 3)
set.seed(1606)
(y_star <- rnorm(10, 0, sd(y)))
mean(y_star-0); sd(y_star)
(t_star <- mean(y_star-0) / (sd(y_star) / sqrt(length(y_star))))
set.seed(1606)
B <- 1e4
n <- 10
xbars_star <- rep(NA, B)
sds_star <- rep(NA, B)
ts_star <- rep(NA, B)
for(b in 1:B) {
y_star <- rnorm(n, 0, sd(y))
m <- mean(y_star)
s <- sd(y_star)
xbars_star[b] <- m
sds_star[b] <- s
ts_star[b] <- m / (s / sqrt(n))
}
opar <- par(mfrow=c(2,2))
hist(xbars_star, nclass = 100)
abline(v = 0.75, col='red')
hist(sds_star, nclass=100)
abline(v = 1.789, col='red')
hist(ts_star, nclass=100)
abline(v = 1.789, col='red')
qqnorm(ts_star); qqline(ts_star)
par(opar)
length(which(ts_star > 1.3257)) / B
set.seed(1606)
(y_star <- rnorm(10, 1, 1.8))
t.test(y_star)$conf.int
set.seed(1606)
B <- 1e2
conf_intervals <-
data.frame(b=rep(NA, B),
lower=rep(NA, B),
xbar=rep(NA, B),
upper=rep(NA, B))
true_mu <- 1
for(b in 1:B) {
(y_star <- rnorm(10, true_mu, 1.8))
conf_intervals[b, ] = c(b=b,
lower=t.test(y_star)$conf.int[1],
xbar=mean(y_star),
upper=t.test(y_star)$conf.int[2])
}
for(b in 1:B) {
(y_star <- rnorm(10, true_mu, 1.8))
conf_intervals[b, ] = c(b=b,
lower=t.test(y_star)$conf.int[1],
xbar=mean(y_star),
upper=t.test(y_star)$conf.int[2])
}
conf_intervals <- conf_intervals %>%
mutate(lucky = (lower <= true_mu & true_mu <= upper))
#######################################################
####### Section 0-1. 통계 모형, 설명 따라가보기 t-test example ########
library("dplyr")
library("ggplot2")
conf_intervals <- conf_intervals %>%
mutate(lucky = (lower <= true_mu & true_mu <= upper))
glimpse(conf_intervals)
table(conf_intervals$lucky)
conf_intervals %>% ggplot(aes(b, xbar, col=lucky)) +
geom_point() +
geom_errorbar(aes(ymin=lower, ymax=upper)) +
geom_hline(yintercept=true_mu, col='red')
rm(list= ls())
setwd("~/work/statistics-R/")
racers <- c("Alonso", "Schumacher", "Hamilton", "Vettel", "Ricciardo")
racers[0]
racers[1]
"Ricciardo"]
worldChampionRacers <- racers[racers != "Ricciardo"]
worldChampionRacers
activeRaceres <- racers[racers != "Schumacher"]
activeRaceres
racers <- c(racers, 'Max')
racersNames <- racers
racersAges <- c(39, 51, 36, 34, 32, 23)
racersNames
racersAges
length(racersNames)
length(racersAges)
f1 <- data.frame(Name = racersNames, Age = racersAges)
View(f1)
View(f1)
f1$Name
f1$Age
f1
f1$worldChampionWins <- c(2,7,5,4,0,0)
f1$childAge <- c(14,27,9,12,5,2)
View(f1)
f1$fatherhoodAge <- f1$Age - f1$childAge
View(f1)
birth_day <- c('1981-07-29', '1969-01-03', '1985-01-07', '1987-07-03', '1989-07-01', '1997-09-30')
birth_day[1] - birth_day[6] # Error
birth_day <- as.Date(c('1981-07-29', '1969-01-03', '1985-01-07', '1987-07-03', '1989-07-01', '1997-09-30'))
birth_day[1] - birth_day[6]
f1$birthDay <- birth_day
age_diff <- Sys.Date() - birth_day
age_diff
job <- c(1,1,1,1,1,2,2,2,2,2)
job <- c(rep(1, 5), rep(2, 5))
job
job <- factor(job, levels = c(1:2), labels = c("Racer", "Engineer"))
job
job <- gl(2, 5, labels = c("Racer", "Engineer"))
job
levels(job)
levels(job) <- c("F1 Racer", "F1 Engineer")
job
names <- c("Alonso", "Schumacher", "Hamilton", "Vettel", "Ricciardo", "Tony", "Ryan", "Cooper", "Bennet", "Jaewoo")
friends <- c(10, NA, 25, 12, 23, 2, 3, 6, 10, NA)
income <- c(2200, 2500, 3100, 3000, 850, 30, 20, 15, 20, 100)
f1Data <- data.frame(names, job, friends, income)
View(f1Data)
mean(f1Data$friends)
(f1Data)
mean(f1Data$friends, na.rm = TRUE)
write.csv(f1Data, "f1Data.csv", row.names = FALSE)
titanic <- read.csv("./data/titanic.csv", header = TRUE, row.names = 1)
View(titanic)
summary(titanic$Survived)
summary(titanic$Sex)
summary(titanic)
str(titanic)
c("Survived", "Pclass", "Sex", "Age")
titanicCore <- titanic[, c("Survived", "Pclass", "Sex", "Age")]
summary(titanicCore)
titanicFemale <- titanic[titanic$Sex=="female", c("Survived", "Pclass", "Sex")]
View(titanicFemale)
mean(titanicFemale$Survived)
titanicOlder <- titanic[titanic$Age < 20, ]
View(titanicOlder)
is.na(titanic$Age)
sum(is.na(titanic$Age))
as.integer(mean(titanic$Age, na.rm = TRUE))
titanic$Age[is.na(titanic$Age)] <- as.integer(mean(titanic$Age, na.rm = TRUE))
titanic$Age[is.na(titanic$Age)]
titanicYounger <- titanic[titanic$Age < 10, c("Survived", "Pclass", "Sex")]
View(titanicYounger)
mean(titanicYounger$Survived)
library(ggplot2)
library(extrafont)
library(reshape)
library(Hmisc)
setwd("~/work/statistics-R/")
facebookData <- read.csv("./data/facebookData.csv", header = TRUE)
View(facebookData)
str(facebookData)
summary(facebookData)
graph <- ggplot(facebookData, aes(facebookData$NPQC_R_Total, facebookData$Rating))
graph + geom_point()
graph + geom_point(shape = 17)
graph + geom_point(shape = 19)
graph + geom_point(shape = 15)
graph + geom_point(size = 6)
graph + geom_point(shape = 17, size = 6)
graph + geom_point(aes(colour = facebookData$Rating_Type))
graph + geom_point(aes(colour = facebookData$Rating_Type), position = "jitter")
graph + geom_point(aes(shape = facebookData$Rating_Type), position = "jitter")
graph + geom_point(aes(colour = facebookData$Rating_Type), position = "jitter")
examData <- read.csv("./data/examData.csv", header = TRUE)
View(examData)
str(examData)
summary(examData)
scatter <- ggplot(examData, aes(examData$Anxiety, examData$Exam))
scatter + geom_point()
scatter + geom_point() + labs(x = "시험 불안", y = "시험 성적 %")
scatter + geom_point() + geom_smooth() + labs(x = "시험 불안", y = "시험 성적 %")
scatter + geom_point() + geom_smooth(method = "lm", colour = "Red") + labs(x = "시험 불안", y = "시험 성적 %")
scatter + geom_point() + geom_smooth(method = "lm", se = F) + labs(x = "시험 불안", y = "시험 성적 %")
scatter <- ggplot(examData, aes(examData$Anxiety, examData$Exam)) +
geom_point() +
geom_smooth(method = "lm", colour = "Red", alpha = 0.1, fill = "Blue") +
labs(x = "시험 불안", y = "시험 성적 %")
scatter
scatter <- ggplot(examData, aes(examData$Anxiety, examData$Exam, colour = examData$Gender)) +
geom_point() +
geom_smooth(method = "lm",aes(fill = examData$Gender), colour = "Red", alpha = 0.1, fill = "Blue") +
labs(x = "시험 불안", y = "시험 성적 %", colur = examData$Gender)
scatter
festivalData <- read.csv("./data/festivalData.csv", header = TRUE)
View(festivalData)
str(festivalData)
summary(festivalData)
festivalHistogram <- ggplot(festivalData, aes(day1)) + theme(legend.position = "none")
festivalHistogram + geom_histogram()
festivalHistogram + geom_histogram(binwidth = 0.4)
festivalHistogram + geom_histogram(binwidth = 0.4) + labs(x = "축제 Day 1 위생", y = "빈도수")
# boxplot
festivalBoxplot <- ggplot(festivalData, aes(gender, day1))
festivalBoxplot + geom_boxplot() + labs(x = "성별", y = "축제 Day 1 위생")
# replace outlier
festivalOutlier <- festivalData[festivalData$day1 > 4, ]
View(festivalOutlier)
festivalData[611, ]$day1 <- 2.02
festivalBoxplot <- ggplot(festivalData, aes(gender, day1))
festivalBoxplot + geom_boxplot() + labs(x = "성별", y = "축제 Day 1 위생")
# density plot
density <- ggplot(festivalData, aes(day1))
density + geom_density() + labs(x = "축제 Day 1 위생", y = "Density Estimate")
chickFlick <- read.csv("./data/ChickFlick.csv", header = TRUE)
View(chickFlick)
str(chickFlick)
summary(chickFlick)
bar <- ggplot(chickFlick, aes(chickFlick$film, chickFlick$arousal))
bar + stat_summary(fun.y = mean, geom = "bar", fill = "white", colour = "Black") +
stat_summary(fun.data = mean_cl_boot, geom = "pointrange", colour = "Red") +
labs(x = "Film", y = "Mean Arousal")
bar <- ggplot(chickFlick, aes(chickFlick$film, chickFlick$arousal, fill = chickFlick$gender))
bar + stat_summary(fun.y = mean, geom = "bar", position = "dodge") +
stat_summary(fun.data = mean_cl_normal, geom = "errorbar", position = position_dodge(width = 0.90), width = 0.2) +
labs(x = "Film", y = "Mean Arousal", fill = "Gender") # +
bar <- ggplot(chickFlick, aes(chickFlick$film, chickFlick$arousal, fill = chickFlick$film))
bar + stat_summary(fun.y = mean, geom = "bar") +
stat_summary(fun.data = mean_cl_normal, geom = "errorbar", width = 0.2) +
facet_wrap( ~ gender) +
labs(x = "Film", y = "Mean Arousal") #+
hiccupsData <- read.csv("./data/Hiccups.csv", header = TRUE)
View(hiccupsData)
str(hiccupsData)
summary(hiccupsData)
View(hiccupsData)
hiccups <- stack(hiccupsData)
names(hiccups) <- c("Hiccups", "Intervention")
View(hiccups)
str(hiccups)
summary(hiccups)
line <- ggplot(hiccups, aes(hiccups$Intervention, hiccups$Hiccups))
line + stat_summary(fun.y = mean, geom = "point") +
stat_summary(fun.y = mean, geom = "line", aes(group = 1), colour = "Blue", linetype = "dashed") +
stat_summary(fun.data = mean_cl_boot, geom = "errorbar", width = 0.2) +
labs(x = "Intervention", y = "Mean Number of Hiccups")
textData <- read.csv("./data/TextMessages.csv", header = TRUE)
View(textData)
text <- melt(textData, id = c("Group"), measured = c("Baseline", "Six_months"))
names(text) <- c("Group", "Time", "Grammer_Score")
View(text)
line <- ggplot(text, aes(text$Time, text$Grammer, colour = text$Group))
line + stat_summary(fun.y = mean, geom = "point") +
stat_summary(fun.y = mean, geom = "line", aes(group = text$Group)) +
stat_summary(fun.data = mean_cl_boot, geom = "errorbar", width = 0.2) +
labs(x = "Time", y = "Mean Grammer Score", colour = "Group")
library(ggplot2)
library(gridExtra)
flip_coin <- sample(x=c(0:1), size = 3, replace = TRUE)
flip_coin
flip_coin <- sample(x=c(0:1), size = 3, replace = TRUE)
flip_coin
mean(flip_coin)
flip_coin <- sample(x=c(0:1), size = 3, replace = TRUE)
flip_coin
mean(flip_coin)
flip_coin <- sample(x=c(0:1), size = 3, replace = TRUE)
flip_coin
mean(flip_coin)
flip_coin <- sample(x=c(0:1), size = 3, replace = TRUE)
flip_coin
mean(flip_coin)
flip_coin <- sample(x=c(0:1), size = 3, replace = TRUE)
flip_coin
mean(flip_coin)
flip_coin(3)
flip_coin <- function(n) {
l <- c()
yy <- c()
for(x in 1:n){
flip_coin <- sample(x=c(0:1), size = x, replace = TRUE)
l <- c(l, mean(flip_coin))
yy <- c(yy, x)
}
histogram <- ggplot(data.frame(x = l), aes(x)) +
geom_histogram(binwidth = 0.02,
colour="black", fill="blue", alpha = 0.5) +
coord_cartesian(xlim=c(0, 1))
lineplot <- ggplot(data.frame(x = yy, y = l), aes(x, y)) + geom_line()
grid.arrange(histogram, lineplot, nrow=2, ncol=1)
}
flip_coin(3)
flip_coin(10)
flip_coin(50)
flip_coin(100)
flip_coin(1000)
flip_coin(10000)
sum(x * y) / sum(y)
## 기대값 계산
x <- c(10000, 1000, 100, 1, 0)
y <- c(1, 5, 15, 180, 99799)
sum(x * y) / sum(y)
## 조합 구하기
choose(4, 2)
## 조합 구하기
choose(4, 2) * (1/4)^2 * (3/4)^2
## 이항분포 확률 계산하기
choose(20, 7) * (1/4)^7 * (3/4)^13
dbinom(7, 20, 1/4)
## 표준정규분포 확률분포표
pnorm(1.96)
(1-pnorm(1.96))*2
pnorm(1.64)
c(42 - (2.306 * 2.5), 42 + (2.306 * 2.5))
qt(1-0.025, 8)
a = 0.025
df = 8
qt(1-a, df)
