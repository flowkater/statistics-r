c(1, 2, 3, 4, 6)
c(1, 2, 3, 4, 5)
metallica <- c("Lars", "James", "Jason", "Kirk")
metallica <- metallica[metallica != "Jason"]
metallica
metallica <- c(metallica, "Rob")
metallica
name <- ("1", 1)
name <- c("1", 1)
name <- c("1", 1)
name
name <- c(1, 1)
name
name <- [1, 2, 3]
name <- (1, 2)
name <- [1, 2, "asd"]
install.packages("car")
install.packages("pastecs")
install.packages("psych")
install.packages("SuppDists")
install.packages("truncnorm")
library(car)
library(ggplot2)
library(pastecs)
library(psych)
library(gridExtra)
library(truncnorm)
library(SuppDists)
Sys.setlocale(category = "LC_CTYPE", locale = "ko_KR.UTF-8")
theme_set(theme_gray(base_family="AppleGothic"))
par(family = "AppleGothic")
pnorm(1.96)
1 - pnorm(1.96)
1 - pnorm(1.64)
pnorm(-1.64)
pnorm(1.64)
pnorm(1.64) - pnorm(-1.64)
pnorm(1.96) - pnorm(-1.96)
qnorm(0.05)
qnorm(1-0.05)
dnorm_range999 <- function(x) {
y <- dnorm(x)
y[x < -3.29 | x > 3.29] <- NA  # 이 범위에는 색깔 없음
return(y)
}
dnorm_range99 <- function(x) {
y <- dnorm(x)
y[x < -2.58 | x > 2.58] <- NA  # 이 범위에는 색깔 없음
return(y)
}
dnorm_range95 <- function(x) {
y <- dnorm(x)
y[x < -1.96 | x > 1.96] <- NA  # 이 범위에는 색깔 없음
return(y)
}
ggplot(data.frame(x=c(-4,4)), aes(x=x)) +
stat_function(fun=dnorm, colour="blue", size=1) +
stat_function(fun=dnorm_range999, geom = "area", fill="blue", alpha = 0.5) +
stat_function(fun=dnorm_range99, geom = "area", fill="white", alpha = 0.5) +
stat_function(fun=dnorm_range95, geom = "area", fill="white", alpha = 0.5) +
ggtitle("Normal Distribution")
library(car)
library(ggplot2)
library(pastecs)
library(psych)
library(gridExtra)
library(truncnorm)
library(SuppDists)
y <- dnorm(x)
dnorm_range999 <- function(x) {
y <- dnorm(x)
y[x < -3.29 | x > 3.29] <- NA  # 이 범위에는 색깔 없음
return(y)
}
dnorm_range99 <- function(x) {
y <- dnorm(x)
y[x < -2.58 | x > 2.58] <- NA  # 이 범위에는 색깔 없음
return(y)
}
dnorm_range95 <- function(x) {
y <- dnorm(x)
y[x < -1.96 | x > 1.96] <- NA  # 이 범위에는 색깔 없음
return(y)
}
ggplot(data.frame(x=c(-4,4)), aes(x=x)) +
stat_function(fun=dnorm, colour="blue", size=1) +
stat_function(fun=dnorm_range999, geom = "area", fill="blue", alpha = 0.5) +
stat_function(fun=dnorm_range99, geom = "area", fill="white", alpha = 0.5) +
stat_function(fun=dnorm_range95, geom = "area", fill="white", alpha = 0.5) +
ggtitle("Normal Distribution")
qt(p - 0.025, df = 19)
qt(p = 0.025, df = 19)
qt(p = 1-0.025, df = 19)
pt(-2.093, 19)
qnorm(1-0.01)
qt(0.025, 19)
qt(1-0.025, 19)
pt(2.795, 19)
1-pt(2.795, 19)
dlf <- read.csv("./data/festivalDataNoOutlier.csv", header = TRUE)
## Mac for Korean / Mac 에서 한글 깨질때,
# Sys.setlocale(category = "LC_CTYPE", locale = "ko_KR.UTF-8")
# theme_set(theme_gray(base_family="AppleGothic"))
# par(family = "AppleGothic")
#
setwd("~/work/statistics-R/")
Sys.setlocale(category = "LC_CTYPE", locale = "ko_KR.UTF-8")
theme_set(theme_gray(base_family="AppleGothic"))
par(family = "AppleGothic")
dlf <- read.csv("./data/festivalDataNoOutlier.csv", header = TRUE)
View(dlf)
hist.day1 <- ggplot(dlf, aes(day1)) +
theme(legend.position = "none") +
geom_histogram(aes(y = ..density..), colour = "black", fill = "white") +
labs(x = "day 1 위생 상태 점수", y = "밀도") +
stat_function(fun = dnorm,
args = list(mean = mean(dlf$day1, na.rm = TRUE),
sd = sd(dlf$day1, na.rm = TRUE)),
colour = "black",
size = 1)
hist.day1
qqplot.day1 <- ggplot(dlf, aes(sample = dlf$day1)) +
stat_qq() + stat_qq_line(colour = "Red")
qqplot.day1
grid.arrange(hist.day1, qqplot.day1,hist.day2, qqplot.day2,hist.day3, qqplot.day3, nrow=3, ncol=2)
hist.day1 <- ggplot(dlf, aes(day1)) +
theme(legend.position = "none") +
geom_histogram(aes(y = ..density..), colour = "black", fill = "white") +
labs(x = "day 1 위생 상태 점수", y = "밀도") +
stat_function(fun = dnorm,
args = list(mean = mean(dlf$day1, na.rm = TRUE),
sd = sd(dlf$day1, na.rm = TRUE)),
colour = "black",
size = 1)
qqplot.day1 <- ggplot(dlf, aes(sample = dlf$day1)) +
stat_qq() + stat_qq_line(colour = "Red")
hist.day2 <- ggplot(dlf, aes(day2)) +
theme(legend.position = "none") +
geom_histogram(aes(y = ..density..), colour = "black", fill = "white") +
labs(x = "day 2 위생 상태 점수", y = "밀도") +
stat_function(fun = dnorm,
args = list(mean = mean(dlf$day2, na.rm = TRUE),
sd = sd(dlf$day2, na.rm = TRUE)),
colour = "black",
size = 1)
qqplot.day2 <- ggplot(dlf, aes(sample = dlf$day2)) +
stat_qq() + stat_qq_line(colour = "Red")
hist.day3 <- ggplot(dlf, aes(day3)) +
theme(legend.position = "none") +
geom_histogram(aes(y = ..density..), colour = "black", fill = "white") +
labs(x = "day 3 위생 상태 점수", y = "밀도") +
stat_function(fun = dnorm,
args = list(mean = mean(dlf$day3, na.rm = TRUE),
sd = sd(dlf$day3, na.rm = TRUE)),
colour = "black",
size = 1)
qqplot.day3 <- ggplot(dlf, aes(sample = dlf$day3)) +
stat_qq() + stat_qq_line(colour = "Red")
grid.arrange(hist.day1, qqplot.day1,hist.day2, qqplot.day2,hist.day3, qqplot.day3, nrow=3, ncol=2)
### psych
describe(dlf[,c('day1', 'day2', 'day3')])
stat.desc(dlf[,c('day1', 'day2', 'day3')])
, basic = FALSE, norm = TRUE
stat.desc(dlf[,c('day1', 'day2', 'day3')], basic = FALSE, norm = TRUE)
1e2
1-e2
0.1e-2
round(stat.desc(dlf[,c('day1', 'day2', 'day3')], basic = FALSE, norm = TRUE), digits = 3)
rexam <- read.csv("./data/Rxam.csv", header = TRUE)
View(rexam)
str(rexam)
summary(rexam)
## uni -> factor
rexam$uni <- factor(rexam$uni, levels = c(0:1), labels = c("domestic", "international"))
str(rexam)
round(stat.desc(rexam[, c("exam", "computer", "lectures", "numeracy")], basic = FALSE, norm = TRUE), digits = 3)
hist.exam <- ggplot(rexam, aes(exam)) +
geom_histogram(aes(y = ..density..), colour = "black", fill = "white") +
labs(x = "R 시험 점수", y = "밀도") +
stat_function(fun = dnorm,
args = list(mean = mean(rexam$exam, na.rm = TRUE),
sd = sd(rexam$exam, na.rm = TRUE)),
colour = "blue",
size = 1)
hist.computer <- ggplot(rexam, aes(computer)) +
geom_histogram(aes(y = ..density..), colour = "black", fill = "white") +
labs(x = "컴퓨터 활용 능력 점수", y = "밀도") +
stat_function(fun = dnorm,
args = list(mean = mean(rexam$computer, na.rm = TRUE),
sd = sd(rexam$computer, na.rm = TRUE)),
colour = "blue",
size = 1)
hist.lectures <- ggplot(rexam, aes(lectures)) +
geom_histogram(aes(y = ..density..), colour = "black", fill = "white") +
labs(x = "강의 출석률", y = "밀도") +
stat_function(fun = dnorm,
args = list(mean = mean(rexam$lectures, na.rm = TRUE),
sd = sd(rexam$lectures, na.rm = TRUE)),
colour = "blue",
size = 1)
hist.numeracy <- ggplot(rexam, aes(numeracy)) +
geom_histogram(aes(y = ..density..), colour = "black", fill = "white", binwidth = 1) +
labs(x = "수치 해석 능력", y = "밀도") +
stat_function(fun = dnorm,
args = list(mean = mean(rexam$numeracy, na.rm = TRUE),
sd = sd(rexam$numeracy, na.rm = TRUE)),
colour = "blue",
size = 1)
###
grid.arrange(hist.exam, hist.computer, hist.lectures, hist.numeracy, nrow=2, ncol=2)
round(stat.desc(rexam[, c("exam", "computer", "lectures", "numeracy")], basic = FALSE, norm = TRUE), digits = 3)
### by 그룹별 분석
by(data = rexam$exam, INDICES = rexam$uni, FUN = stat.desc, basic = FALSE, norm = TRUE)
by(data = rexam[, c("exam", "numeracy")], INDICES = rexam$uni, FUN = stat.desc, basic = FALSE, norm = TRUE)
by(data = rexam[, c("exam", "numeracy")], INDICES = rexam$uni, FUN = stat.desc, basic = FALSE, norm = TRUE)
## 그룹별로 히스토그램 살펴보기
hist.exam.domestic <- ggplot(domestic, aes(exam)) +
geom_histogram(aes(y = ..density..), colour = "black", fill = "white") +
labs(x = "R 시험 점수", y = "밀도", title = "국내") +
stat_function(fun = dnorm,
args = list(mean = mean(domestic$exam, na.rm = TRUE),
sd = sd(domestic$exam, na.rm = TRUE)),
colour = "blue",
size = 1)
domestic <- subset(rexam, rexam$uni == "domestic")
international <- subset(rexam, rexam$uni == "international")
domestic
## 그룹별로 히스토그램 살펴보기
hist.exam.domestic <- ggplot(domestic, aes(exam)) +
geom_histogram(aes(y = ..density..), colour = "black", fill = "white") +
labs(x = "R 시험 점수", y = "밀도", title = "국내") +
stat_function(fun = dnorm,
args = list(mean = mean(domestic$exam, na.rm = TRUE),
sd = sd(domestic$exam, na.rm = TRUE)),
colour = "blue",
size = 1)
hist.exam.international <- ggplot(international, aes(exam)) +
geom_histogram(aes(y = ..density..), colour = "black", fill = "white") +
labs(x = "R 시험 점수", y = "밀도", title = "국제(해외)") +
stat_function(fun = dnorm,
args = list(mean = mean(international$exam, na.rm = TRUE),
sd = sd(international$exam, na.rm = TRUE)),
colour = "blue",
size = 1)
hist.numeracy.domestic <- ggplot(domestic, aes(numeracy)) +
geom_histogram(aes(y = ..density..), colour = "black", fill = "white", binwidth = 1) +
labs(x = "수치 해석 능력", y = "밀도", title = "국내") +
stat_function(fun = dnorm,
args = list(mean = mean(domestic$numeracy, na.rm = TRUE),
sd = sd(domestic$numeracy, na.rm = TRUE)),
colour = "blue",
size = 1)
hist.numeracy.international <- ggplot(international, aes(numeracy)) +
geom_histogram(aes(y = ..density..), colour = "black", fill = "white", binwidth = 1) +
labs(x = "수치 해석 능력", y = "밀도", title = "국제(해외)") +
stat_function(fun = dnorm,
args = list(mean = mean(international$numeracy, na.rm = TRUE),
sd = sd(international$numeracy, na.rm = TRUE)),
colour = "blue",
size = 1)
###
grid.arrange(hist.exam.domestic, hist.exam.international, hist.numeracy.domestic, hist.numeracy.international, nrow=2, ncol=2)
## 그룹별로 히스토그램 살펴보기
qqplot.exam.domestic <- ggplot(domestic, aes(sample = domestic$exam)) +
stat_qq() + stat_qq_line(colour = "Red")
qqplot.exam.international <- ggplot(international, aes(sample = international$exam)) +
stat_qq() + stat_qq_line(colour = "Red")
qqplot.numeracy.domestic <- ggplot(domestic, aes(sample = domestic$numeracy)) +
stat_qq() + stat_qq_line(colour = "Red")
qqplot.numeracy.international <- ggplot(international, aes(sample = international$numeracy)) +
stat_qq() + stat_qq_line(colour = "Red")
###
grid.arrange(qqplot.exam, qqplot.exam.domestic, qqplot.exam.international,
qqplot.numeracy, qqplot.numeracy.domestic, qqplot.numeracy.international, nrow=2, ncol=3)
hist.exam <- ggplot(rexam, aes(exam)) +
geom_histogram(aes(y = ..density..), colour = "black", fill = "white") +
labs(x = "R 시험 점수", y = "밀도") +
stat_function(fun = dnorm,
args = list(mean = mean(rexam$exam, na.rm = TRUE),
sd = sd(rexam$exam, na.rm = TRUE)),
colour = "blue",
size = 1)
hist.computer <- ggplot(rexam, aes(computer)) +
geom_histogram(aes(y = ..density..), colour = "black", fill = "white") +
labs(x = "컴퓨터 활용 능력 점수", y = "밀도") +
stat_function(fun = dnorm,
args = list(mean = mean(rexam$computer, na.rm = TRUE),
sd = sd(rexam$computer, na.rm = TRUE)),
colour = "blue",
size = 1)
hist.lectures <- ggplot(rexam, aes(lectures)) +
geom_histogram(aes(y = ..density..), colour = "black", fill = "white") +
labs(x = "강의 출석률", y = "밀도") +
stat_function(fun = dnorm,
args = list(mean = mean(rexam$lectures, na.rm = TRUE),
sd = sd(rexam$lectures, na.rm = TRUE)),
colour = "blue",
size = 1)
hist.numeracy <- ggplot(rexam, aes(numeracy)) +
geom_histogram(aes(y = ..density..), colour = "black", fill = "white", binwidth = 1) +
labs(x = "수치 해석 능력", y = "밀도") +
stat_function(fun = dnorm,
args = list(mean = mean(rexam$numeracy, na.rm = TRUE),
sd = sd(rexam$numeracy, na.rm = TRUE)),
colour = "blue",
size = 1)
###
grid.arrange(hist.exam, hist.computer, hist.lectures, hist.numeracy, nrow=2, ncol=2)
qqplot.exam <- ggplot(rexam, aes(sample = rexam$exam)) +
stat_qq() + stat_qq_line(colour = "Red")
qqplot.computer <- ggplot(rexam, aes(sample = rexam$computer)) +
stat_qq() + stat_qq_line(colour = "Red")
qqplot.lectures <- ggplot(rexam, aes(sample = rexam$lectures)) +
stat_qq() + stat_qq_line(colour = "Red")
qqplot.numeracy <- ggplot(rexam, aes(sample = rexam$numeracy)) +
stat_qq() + stat_qq_line(colour = "Red")
###
grid.arrange(qqplot.exam, qqplot.computer, qqplot.lectures, qqplot.numeracy, nrow=2, ncol=2)
### by 그룹별 분석
by(data = rexam$exam, INDICES = rexam$uni, FUN = stat.desc, basic = FALSE, norm = TRUE)
by(data = rexam[, c("exam", "numeracy")], INDICES = rexam$uni, FUN = stat.desc, basic = FALSE, norm = TRUE)
by(data = rexam[, c("exam", "computer","lectures","numeracy")], INDICES = rexam$uni, FUN = stat.desc, basic = FALSE, norm = TRUE)
domestic <- subset(rexam, rexam$uni == "domestic")
international <- subset(rexam, rexam$uni == "international")
## 그룹별로 히스토그램 살펴보기
hist.exam.domestic <- ggplot(domestic, aes(exam)) +
geom_histogram(aes(y = ..density..), colour = "black", fill = "white") +
labs(x = "R 시험 점수", y = "밀도", title = "국내") +
stat_function(fun = dnorm,
args = list(mean = mean(domestic$exam, na.rm = TRUE),
sd = sd(domestic$exam, na.rm = TRUE)),
colour = "blue",
size = 1)
hist.exam.international <- ggplot(international, aes(exam)) +
geom_histogram(aes(y = ..density..), colour = "black", fill = "white") +
labs(x = "R 시험 점수", y = "밀도", title = "국제(해외)") +
stat_function(fun = dnorm,
args = list(mean = mean(international$exam, na.rm = TRUE),
sd = sd(international$exam, na.rm = TRUE)),
colour = "blue",
size = 1)
hist.numeracy.domestic <- ggplot(domestic, aes(numeracy)) +
geom_histogram(aes(y = ..density..), colour = "black", fill = "white", binwidth = 1) +
labs(x = "수치 해석 능력", y = "밀도", title = "국내") +
stat_function(fun = dnorm,
args = list(mean = mean(domestic$numeracy, na.rm = TRUE),
sd = sd(domestic$numeracy, na.rm = TRUE)),
colour = "blue",
size = 1)
hist.numeracy.international <- ggplot(international, aes(numeracy)) +
geom_histogram(aes(y = ..density..), colour = "black", fill = "white", binwidth = 1) +
labs(x = "수치 해석 능력", y = "밀도", title = "국제(해외)") +
stat_function(fun = dnorm,
args = list(mean = mean(international$numeracy, na.rm = TRUE),
sd = sd(international$numeracy, na.rm = TRUE)),
colour = "blue",
size = 1)
###
grid.arrange(hist.exam.domestic, hist.exam.international, hist.numeracy.domestic, hist.numeracy.international, nrow=2, ncol=2)
## 그룹별로 히스토그램 살펴보기
qqplot.exam.domestic <- ggplot(domestic, aes(sample = domestic$exam)) +
stat_qq() + stat_qq_line(colour = "Red")
qqplot.exam.international <- ggplot(international, aes(sample = international$exam)) +
stat_qq() + stat_qq_line(colour = "Red")
qqplot.numeracy.domestic <- ggplot(domestic, aes(sample = domestic$numeracy)) +
stat_qq() + stat_qq_line(colour = "Red")
qqplot.numeracy.international <- ggplot(international, aes(sample = international$numeracy)) +
stat_qq() + stat_qq_line(colour = "Red")
###
grid.arrange(qqplot.exam, qqplot.exam.domestic, qqplot.exam.international,
qqplot.numeracy, qqplot.numeracy.domestic, qqplot.numeracy.international, nrow=2, ncol=3)
round(stat.desc(cbind(rexam$numeracy, nnumeracy$x), basic = FALSE, norm = TRUE), digits = 3)
norm_numeracy <- rtruncnorm(n = length(rexam$numeracy),a = 0, b = 15, mean = mean(rexam$numeracy), sd = sd(rexam$numeracy))
nnumeracy <- data.frame(x = norm_numeracy)
### Shapiro-Wilk Test
####
round(stat.desc(rexam[, c("exam", "numeracy")], basic = FALSE, norm = TRUE), digits = 3)
shapiro.test(rexam$exam)
shapiro.test(rexam$numeracy)
by(rexam$exam, rexam$uni, shapiro.test)
by(rexam$numeracy, rexam$uni, shapiro.test)
s
concert <- read.csv("./data/concert-homovar.csv", header = TRUE)
concerth <- read.csv("./data/concert-hetervar.csv", header = TRUE)
conRing <- stack(concert)
names(conRing) <- c("Ringing", "Concert")
line.homo <- ggplot(conRing, aes(conRing$Concert, conRing$Ringing, group = 1)) +
geom_point() +
stat_summary(fun.y = mean, geom = "point", shape = 3, size=5) +
stat_summary(fun.y = mean, geom = "line", size = 1, colour = 'deeppink') +
coord_cartesian(ylim=c(0, 70)) +
labs(x = "Concert", y = "Ringing (Hours)")
concerth <- read.csv("./data/concert-hetervar.csv", header = TRUE)
conRingh <- stack(concerth)
names(conRingh) <- c("Ringing", "Concert")
line.hete <- ggplot(conRingh, aes(conRingh$Concert, conRingh$Ringing, group = 1)) +
geom_point() +
stat_summary(fun.y = mean, geom = "point", shape = 3, size=5) +
stat_summary(fun.y = mean, geom = "line", size = 1, colour = 'deeppink') +
coord_cartesian(ylim=c(0, 70)) +
labs(x = "Concert", y = "Ringing (Hours)")
grid.arrange(line.homo, line.hete, nrow=1, ncol=2)
### 레빈 검정 (Levene's test)
leveneTest(conRing$Ringing, conRing$Concert)
leveneTest(conRingh$Ringing, conRingh$Concert)
fmax <- function(var1, var2) {
if (var1 > var2) {
return(var1 / var2)
} else {
return(var2 / var1)
}
}
qmaxFratio(0.95, 49, 2)
fmax_exam <- fmax(var(domestic$exam), var(international$exam))
fmax_exam
fmax_exam < qmaxFratio(0.95, 49, 2)
1 - pmaxFratio(fmax_exam, 49, 2)
qmaxFratio(0.95, 49, 2)
fmax_numeracy <- fmax(var(domestic$numeracy), var(international$numeracy))
fmax_numeracy
fmax_numeracy < qmaxFratio(0.95, 49, 2)
1 - pmaxFratio(fmax_numeracy, 49, 2)
qnorm(1 - (0.001 / 2))
qnorm(1 - (0.05 / 2))
qnorm(1 - (0.01 / 2))
### ifelse(조건, 조건이 TRUE 일때 value, FALSE 일때 value)
fd <- read.csv("./data/festivalData.csv", header = TRUE)
View(fd)
replaceValue <- mean(fd$day1) + 3.29*sd(fd$day1)
replaceValue
fd[fd$day1 > replaceValue, ]
fd$day1NoOutlier2 <- ifelse(fd$day1 > replaceValue, replaceValue, fd$day1)
fd[fd$day1NoOutlier2 > replaceValue, ]
replaceValue
