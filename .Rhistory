} else {
x <- '홀수입니다.'
}
x
xs <- 1:9
sum(xs[xs %% 3 == 0 | xs %% 5 == 0])
install.packages("truncnorm")
library(ggplot2)
library(gridExtra)
## Script 창으로 들어가는 키 숏컷: Ctrl + 1
## Console 창 들어가는 키 숏컷: Ctrl + 2
## Script 여러개일 때 다음 Script 고르기: Ctrl + Tab
## Script 여러개일 때 이전 Script 고르기: Ctrl + Shift + Tab
## Console 클리닝: Ctrl + L
## 메모리상의 모든 변수 및 데이터 삭제: rm(list = ls())
## Mac for Korean / Mac 에서 한글 깨질때,
Sys.setlocale(category = "LC_CTYPE", locale = "ko_KR.UTF-8")
theme_set(theme_gray(base_family="AppleGothic"))
par(family = "AppleGothic")
flip_coin <- sample(x=c(0:1), size = 3, replace = TRUE)
flip_coin
mean(flip_coin)
flip_coin <- function(n) {
l <- c()
yy <- c()
for(x in 1:n){
flip_coin <- sample(x=c(0:1), size = x, replace = TRUE)
l <- c(l, mean(flip_coin))
yy <- c(yy, x)
}
histogram <- ggplot(data.frame(x = l), aes(x)) +
geom_histogram(binwidth = 0.02,
colour="black", fill="blue", alpha = 0.5) +
coord_cartesian(xlim=c(0, 1))
lineplot <- ggplot(data.frame(x = yy, y = l), aes(x, y)) + geom_line()
grid.arrange(histogram, lineplot, nrow=2, ncol=1)
}
flip_coin(3)
flip_coin(10)
flip_coin(50)
flip_coin(100)
flip_coin(1000)
flip_coin(10000)
## 표준정규분포 확률분포표
pnorm(1.96)
(1-pnorm(1.96))*2
pnorm(1.64)
a = - (22 / 38.73)
b = 34 / 38.73
pnorm(b) - pnorm(a)
pnorm(1.175) * 7 + 74
qnorm(0.88)
a = - (22 / 38.73)
b = 34 / 38.73
pnorm(b) - pnorm(a)
a
x = 0.05 * 38.73 + 800
x
pnorm(1.64)
1 - pnorm(1.64)
## 표준정규분포 확률분포표
pnorm(1.96)
(1-pnorm(1.96))*2
pnorm(1.64)
1 - pnorm(1.64)
qt(1-0.025, 8)
a = 0.025
df = 8
qt(1-a, df)
(1-pnorm(1.96))*2
a = 0.025
df = 8
qt(1-a, df)
n = 9
a = 0.025
df = n - 1
qt(1-a, df)
c(42 - (2.306 * 2.5), 42 + (2.306 * 2.5))
qt(a, df)
source('~/workspace/r/level2basic.R', echo=TRUE)
qt(1-a, df)
# 2
n = 17
a = (1-0.95) / 2
df = n - 1
qt(1-a, df)
source('~/workspace/r/level2basic.R', echo=TRUE)
sd(mgs)
se = s / sqrt(n)
# 2
mgs <- c(16, 22, 21, 20, 23, 21, 19, 15, 13, 13, 17, 20, 29, 18, 22, 16, 25)
m = mean(mgs)
s = sd(mgs)
n = 17
a = (1-0.95) / 2
df = n - 1
qt(1-a, df)
se = s / sqrt(n)
se
m - se
xt = qt(1-a, df)
c(m - (xt * se), m + (xt * se))
t.test(mgs)
xt = qt(1-a, df)
xt
length(mgs)
# 2
mgs <- c(16, 22, 21, 20, 23, 21, 19, 15, 13, 13, 17, 20, 29, 18, 22, 16, 25)
m = mean(mgs)
s = sd(mgs)
n = length(mgs)
a = (1-0.95) / 2
df = n - 1
xt = qt(1-a, df)
se = s / sqrt(n)
c(m - (xt * se), m + (xt * se))
m = mean(milks)
# 3
milks <- c(475,555,599,392,570,500,505,637,453,510,513,583,350,643,481,537,618,327,499,421)
m = mean(milks)
m = mean(milks);m
s = sd(milks);s
n = length(milks)
a = (1-0.9) / 2
a
n = length(milks);n
df = n - 1
a = (1-0.9) / 2;a
df = n - 1;df
a = (1-0.9) / 2;a
df = n - 1;df
xt = qt(1-a, df);xt
se = s / sqrt(n)
c(m - (xt * se), m + (xt * se))
qnorm(0.95)
qnorm(0.99)
qnorm(0.99)
pnorm(2.58)
qnorm(0.95) # 1.64
qnorm(0.99)
1-qnorm(0.95) # 1.64
qnorm(0.95) # 1.64
qnorm(0.995)
qnorm(1-a) # 1.64
a99 = (1 - 0.99) / 2
a95 = (1 - 0.95) / 2
a99 = (1 - 0.99) / 2
qnorm(1-a95) # 1.64
qnorm(1-a99)
df = n
z_value95 = qnorm(1-a95) # 1.64
z_value99 = qnorm(1-a99)
se = s / sqrt(n)
se
c(m - (z_value95 * se), m + (z_value95 * se))
# 6-1
n = 64
m = 2.6
s = 0.3
df = n
a95 = (1 - 0.95) / 2
a99 = (1 - 0.99) / 2
z_value95 = qnorm(1-a95) # 1.64
z_value99 = qnorm(1-a99)
se = s / sqrt(n)
c(m - (z_value95 * se), m + (z_value95 * se))
c(m - (z_value99 * se), m + (z_value99 * se))
# 6-2
a95 = (1 - 0.95) / 2
z_value95 = qnorm(1-a95) # 1.64
z_value95
# 6-2
d = 0.05
n = ( (z_value95 * s) / d ) ** 2
n
# 2-2
1 - pnorm(1.64)
# 2-2
pnorm(-1.64)
# 2-2
qnorm(0.05)
x = 800 + (z_value * 38.73);x
# 2-2
z_value = qnorm(0.05)
x = 800 + (z_value * 38.73);x
z <- function(x) {
return((x - m) / s)
}
z <- function(x) {
return((x - m) / s)
}
z <- function(x, m, s) {
return((x - m) / s)
}
a = z(778, m , s)
a = z(778, m , s);a
# 2-1
m = 800
s = 38.73
z <- function(x, m, s) {
return((x - m) / s)
}
a = z(778, m , s);a
b = z(834, m , s);b
pnorm(b) - pnorm(a)
# 2-2
z_value = qnorm(0.05)
x = m + (z_value * s);x
x = 400 * 1.2;x
m = 55
s = 8
x/n
# 5
n = 5000
x = 400 * 1.2;x
m = 55
s = 8
x/n
qnorm(x/n)
qnorm(1 - x/n)
# 5
n = 5000
pass_n = 400 * 1.2;pass_n
m = 55
s = 8
qnorm(1 - pass_n/n)
z_value = qnorm(1 - pass_n/n);z_value
x = m + (z_value * s);x
## Script 창으로 들어가는 키 숏컷: Ctrl + 1
## Console 창 들어가는 키 숏컷: Ctrl + 2
## Script 여러개일 때 다음 Script 고르기: Ctrl + Tab
## Script 여러개일 때 이전 Script 고르기: Ctrl + Shift + Tab
## Console 클리닝: Ctrl + L
## 메모리상의 모든 변수 및 데이터 삭제: rm(list = ls())
## Mac for Korean / Mac 에서 한글 깨질때,
Sys.setlocale(category = "LC_CTYPE", locale = "ko_KR.UTF-8")
theme_set(theme_gray(base_family="AppleGothic"))
par(family = "AppleGothic")
## R version check: Sys.getenv("R_ARCH") - 32 bit인 분은 R을 다시 인스톨해주시기 바랍니다
## 64 bit for "/x64"
## 32 bit for "/i386"
## 각 라인마다 Ctrl(Cmd) + Enter
library(ggplot2)
library(gridExtra)
## Script 창으로 들어가는 키 숏컷: Ctrl + 1
## Console 창 들어가는 키 숏컷: Ctrl + 2
## Script 여러개일 때 다음 Script 고르기: Ctrl + Tab
## Script 여러개일 때 이전 Script 고르기: Ctrl + Shift + Tab
## Console 클리닝: Ctrl + L
## 메모리상의 모든 변수 및 데이터 삭제: rm(list = ls())
## Mac for Korean / Mac 에서 한글 깨질때,
Sys.setlocale(category = "LC_CTYPE", locale = "ko_KR.UTF-8")
theme_set(theme_gray(base_family="AppleGothic"))
par(family = "AppleGothic")
## R version check: Sys.getenv("R_ARCH") - 32 bit인 분은 R을 다시 인스톨해주시기 바랍니다
## 64 bit for "/x64"
## 32 bit for "/i386"
## 각 라인마다 Ctrl(Cmd) + Enter
library(ggplot2)
library(gridExtra)
flip_coin <- sample(x=c(0:1), size = 3, replace = TRUE)
flip_coin
flip_coin
mean(flip_coin)
flip_coin <- sample(x=c(0:1), size = 3, replace = TRUE)
flip_coin
mean(flip_coin)
flip_coin <- sample(x=c(0:1), size = 3, replace = TRUE)
flip_coin
mean(flip_coin)
flip_coin <- sample(x=c(0:1), size = 3, replace = TRUE)
flip_coin
mean(flip_coin)
flip_coin <- sample(x=c(0:1), size = 3, replace = TRUE)
flip_coin
mean(flip_coin)
flip_coin <- sample(x=c(0:1), size = 3, replace = TRUE)
flip_coin
mean(flip_coin)
flip_coin <- sample(x=c(0:1), size = 3, replace = TRUE)
flip_coin
mean(flip_coin)
flip_coin <- function(n) {
l <- c()
yy <- c()
for(x in 1:n){
flip_coin <- sample(x=c(0:1), size = x, replace = TRUE)
l <- c(l, mean(flip_coin))
yy <- c(yy, x)
}
histogram <- ggplot(data.frame(x = l), aes(x)) +
geom_histogram(binwidth = 0.02,
colour="black", fill="blue", alpha = 0.5) +
coord_cartesian(xlim=c(0, 1))
lineplot <- ggplot(data.frame(x = yy, y = l), aes(x, y)) + geom_line()
grid.arrange(histogram, lineplot, nrow=2, ncol=1)
}
flip_coin(3)
flip_coin(10)
flip_coin(50)
flip_coin(100)
flip_coin(1000)
flip_coin(10000)
flip_coin(100)
flip_coin(1000)
flip_coin(10000)
pnorm(1.96)
(1 - pnorm(1.96)) * 2
a = z(778, m, s);a
b = z(834, m, s);b
a = z(778, m, s);a
b = z(834, m, s);b
m <- 800
s <- 38.73
z <- function(x, m, x) {
return((x - m) / s)
}
z <- function(x, m, x) {
return((x - m) / s)
}
m = 800
s = 38.73
z <- function(x, m, s) {
return((x - m) / s)
}
a = z(778, m , s);a
b = z(834, m , s);b
pnorm(b)
pnorm(a)
pnorm(b) - pnorm(a)
z_value = qnorm(0.05);z_value
x = m + (z_value * s);x
pass_n = 400 * 1.2;pass_n
(pass_n/5000)
z_value = qnorm(1 - (pass_n/n);z_value
z_value = qnorm(1 - (pass_n/n));z_value
x = m + (z_value * s);x
n = 5000
pass_n = 400 * 1.2;pass_n
m = 55
s = 8
z_value = qnorm(1 - (pass_n/n));z_value
x = m + (z_value * s);x
mgs <- c(16, 22, 21, 20, 23, 21, 19, 15, 13, 13, 17, 20, 29, 18, 22, 16, 25)
m = mean(mgs)
m = mean(mgs);m
s = sd(mgs);s
n = length(mgs);n
a = (1 - 0.95);a
a = (1 - 0.95)/2;a
df = n - 1;df
t_value = qt(1-a, df);t_value
se = s / sqrt(n);se
c(m - (t_value * se), m + (t_value * se))
t.test(mgs)
a95 = (1 - 0.95) / 2;a95
z_value95 = qnorm(1 - a95);z_value95
n = ((z_value95 * s) / d) ** 2
n
d = 0.05
s = 0.3
a95 = (1 - 0.95) / 2;a95
z_value95 = qnorm(1 - a95);z_value95
n = ((z_value95 * s) / d) ** 2
n
mgs <- c(16, 22, 21, 20, 23, 21, 19, 15, 13, 13, 17, 20, 29, 18, 22, 16, 25)
m = mean(mgs);m
s = sd(mgs);s
v = var(mgs);v
library(car)
library(boot)
library(QuantPsyc)
library(ggplot2)
library(gridExtra)
library(truncnorm)
setwd("~/oldwork/statistics-r/")
heights <- read.csv("./data/heights.csv", header = T)
head(heights)
str(heights)
heights.lplot <- ggplot(heights, aes(father, son)) +
geom_point() +
geom_smooth(method = "lm", colour = "lightblue", se = F) +
geom_vline(xintercept = mean(heights$father), linetype = "dashed") +
geom_hline(yintercept = mean(heights$son), linetype = "dashed") +
labs(x = "아버지 키", y = "아들 키")
heights.lplot
Sys.setlocale(category = "LC_CTYPE", locale = "ko_KR.UTF-8")
theme_set(theme_gray(base_family="AppleGothic"))
par(family = "AppleGothic")
r_data.line <- ggplot(r_data, aes(father_r, son_r)) +
geom_point() +
geom_vline(xintercept = mean(r_data$father_r), linetype = "dashed") +
geom_hline(yintercept = mean(r_data$son_r), linetype = "dashed") +
labs(x = "표준화된 아버지 키", y = "표준화된아들 키") +
coord_cartesian(xlim = c(-3, 3), ylim = c(-3, 3))
heights.stz_plot <- ggplot(heights, aes(stz_father, stz_son)) +
geom_point() +
geom_smooth(method = "lm", colour = "lightblue", se = F) +
geom_vline(xintercept = mean(heights$stz_father), linetype = "dashed") +
geom_hline(yintercept = mean(heights$stz_son), linetype = "dashed") +
labs(x = "표준화된 아버지 키", y = "표준화된아들 키")
heights.stz_plot
heights.lplot <- ggplot(heights, aes(father, son)) +
geom_point() +
geom_smooth(method = "lm", colour = "lightblue", se = F) +
geom_vline(xintercept = mean(heights$father), linetype = "dashed") +
geom_hline(yintercept = mean(heights$son), linetype = "dashed") +
labs(x = "아버지 키", y = "아들 키")
heights.lplot
heights$stz_father <- (heights$father - mean(heights$father)) / sd(heights$father)
heights$stz_son <- (heights$son - mean(heights$son)) / sd(heights$son)
View(heights)
heights.stz_plot <- ggplot(heights, aes(stz_father, stz_son)) +
geom_point() +
geom_smooth(method = "lm", colour = "lightblue", se = F) +
geom_vline(xintercept = mean(heights$stz_father), linetype = "dashed") +
geom_hline(yintercept = mean(heights$stz_son), linetype = "dashed") +
labs(x = "표준화된 아버지 키", y = "표준화된아들 키")
heights.stz_plot
grid.arrange(heights.lplot, heights.stz_plot, nrow = 1, ncol = 2)
heights_r <- cor(heights$father, heights$son);heights_r
x <- seq(from=-3.0, to=3.0, length.out=1078)
y <- heights_r * x
r_data <- data.frame("father_r" = x, "son_r" = y)
r_data.line <- ggplot(r_data, aes(father_r, son_r)) +
geom_point() +
geom_vline(xintercept = mean(r_data$father_r), linetype = "dashed") +
geom_hline(yintercept = mean(r_data$son_r), linetype = "dashed") +
labs(x = "표준화된 아버지 키", y = "표준화된아들 키") +
coord_cartesian(xlim = c(-3, 3), ylim = c(-3, 3))
r_data.line
album1 = read.csv("./data/Album Sales 1.csv", header = TRUE)
head(album1)
albumSales.lm1 <- lm(album1$sales ~ album1$adverts)
# albumSales.lm1 <- lm(sales ~ adverts, data = album1)
summary(albumSales.lm1)
cor(album1$sales, album1$adverts)^2
albumSales.scatter <- ggplot(album1, aes(adverts, sales)) +
geom_point() +
geom_smooth(method = "lm", colour = "Blue", se = F) +
labs(x = "광고 마케팅 비용", y = "판매량")
albumSales.scatter
install.packages(c("ggm", "polycor"))
library(boot)
library(ggm)
library(ggplot2)
library(gridExtra)
library(Hmisc)
library(polycor)
examData <- read.csv("./data/examData.csv", header = TRUE)
View(examData)
str(examData)
summary(examData)
# AE - Anxiety, Exam
AE.base <- ggplot(examData, aes(examData$Anxiety, examData$Exam)) +
geom_point() +
geom_smooth(method = "lm", colour = "Red", alpha = 0.1, fill = "Blue") +
labs(x = "시험 불안", y = "시험 성적 %")
AE.group <- ggplot(examData, aes(examData$Anxiety, examData$Exam, colour = examData$Gender)) +
geom_point() +
geom_smooth(method = "lm", aes(group = examData$Gender), se = F) +
labs(x = "시험 불안", y = "시험 성적 %", colur = examData$Gender) # + theme(legend.position = "none")
grid.arrange(AE.base, AE.group, nrow = 2, ncol = 1)
grid.arrange(RE.base, RE.group, nrow = 2, ncol = 1)
## Heatmap
cormat <- round(cor(examData2), 2);cormat
# covariance 공분산
examData2 <- examData[, c("Revise", "Exam", "Anxiety")]
## Heatmap
cormat <- round(cor(examData2), 2);cormat
View(cormat)
library(reshape2)
melted_cormat <- melt(cormat)
View(melted_cormat)
heatmap.basic <- ggplot(melted_cormat, aes(x = Var1, y = Var2, fill=value)) + geom_tile()
heatmap.basic
# Get lower triangle of the correlation matrix
get_lower_tri<-function(cormat){
cormat[upper.tri(cormat)] <- NA
return(cormat)
}
# Get upper triangle of the correlation matrix
get_upper_tri <- function(cormat){
cormat[lower.tri(cormat)]<- NA
return(cormat)
}
lower_tri <- get_lower_tri(cormat);lower_tri
melted_cormat <- melt(lower_tri, na.rm = TRUE)
View(melted_cormat)
heatmap.lower_tri <- ggplot(melted_cormat, aes(Var1,Var2, fill=value)) +
geom_tile(color = "white") +
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1, 1), space = "Lab", name="Pearson\nCorrelation") +
theme_minimal()
heatmap.lower_tri
heatmap.text <- ggplot(melted_cormat, aes(Var1,Var2, fill=value)) +
geom_tile(color = "white") +
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1, 1), space = "Lab", name="Pearson\nCorrelation") +
theme_minimal() +
geom_text(aes(Var1,Var2, label=value), colour = "black",size = 4)
heatmap.text
## R 내장 mtcars 데이터
mycars <- mtcars[, c(1,3,4,5,6,7)]
melted_cardata <- melt(get_lower_tri(round(cor(mycars), 2)), na.rm = TRUE);melted_cardata
heatmap.mycars <- ggplot(melted_cardata, aes(Var1,Var2, fill=value)) +
geom_tile(color = "white") +
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1, 1), space = "Lab", name="Pearson\nCorrelation") +
theme_minimal() +
geom_text(aes(Var1,Var2, label=value), colour = "black",size = 4)
heatmap.mycars
