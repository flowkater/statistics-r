View(ar_stime)
p1 <- ggplot(data = data.frame(x = c(0, 100)), aes(x)) +
stat_function(fun = dnorm, n = 100, args = list(mean = 50, sd = 35)) +
labs(y = "", title = "sd: 35") +
coord_cartesian(ylim=c(0, 0.03))
Sys.setlocale(category = "LC_CTYPE", locale = "ko_KR.UTF-8")
theme_set(theme_gray(base_family="AppleGothic"))
par(family = "AppleGothic")
install.packages("ggplot2")
library(ggplot2)
library(gridExtra)
Sys.setlocale(category = "LC_CTYPE", locale = "ko_KR.UTF-8")
theme_set(theme_gray(base_family="AppleGothic"))
par(family = "AppleGothic")
p1 <- ggplot(data = data.frame(x = c(0, 100)), aes(x)) +
stat_function(fun = dnorm, n = 100, args = list(mean = 50, sd = 35)) +
labs(y = "", title = "sd: 35") +
coord_cartesian(ylim=c(0, 0.03))
p2 <- ggplot(data = data.frame(x = c(0, 100)), aes(x)) +
stat_function(fun = dnorm, n = 100, args = list(mean = 50, sd = 15)) +
labs(y = "", title = "sd: 15") +
coord_cartesian(ylim=c(0, 0.03))
grid.arrange(p1, p2, nrow=1, ncol=2)
p1 <- ggplot(data = data.frame(x = c(0, 100)), aes(x)) +
stat_function(fun = dnorm, n = 100, args = list(mean = 50, sd = 35)) +
labs(y = "", title = "sd: 35") +
coord_cartesian(ylim=c(0, 0.03)) +
ggplot(data = data.frame(x = c(0, 100)), aes(x)) +
stat_function(fun = dnorm, n = 100, args = list(mean = 50, sd = 15)) +
labs(y = "", title = "sd: 15") +
coord_cartesian(ylim=c(0, 0.03))
p1 <- ggplot(data = data.frame(x = c(0, 100)), aes(x)) +
stat_function(fun = dnorm, n = 100, args = list(mean = 50, sd = 35)) +
labs(y = "", title = "sd: 35") +
coord_cartesian(ylim=c(0, 0.03)) +
stat_function(fun = dnorm, n = 100, args = list(mean = 50, sd = 15)) +
labs(y = "", title = "sd: 15") +
coord_cartesian(ylim=c(0, 0.03))
p1 <- ggplot(data = data.frame(x = c(0, 100)), aes(x)) +
stat_function(fun = dnorm, n = 100, args = list(mean = 50, sd = 35)) +
labs(y = "", title = "sd: 35") +
coord_cartesian(ylim=c(0, 0.03)) +
stat_function(fun = dnorm, n = 100, args = list(mean = 50, sd = 15)) +
p2 <- ggplot(data = data.frame(x = c(0, 100)), aes(x)) +
stat_function(fun = dnorm, n = 100, args = list(mean = 50, sd = 15)) +
labs(y = "", title = "sd: 15") +
coord_cartesian(ylim=c(0, 0.03))
p1 <- ggplot(data = data.frame(x = c(0, 100)), aes(x)) +
stat_function(fun = dnorm, n = 100, args = list(mean = 50, sd = 35)) +
labs(y = "", title = "sd: 35") +
coord_cartesian(ylim=c(0, 0.03)) +
stat_function(fun = dnorm, n = 100, args = list(mean = 50, sd = 15))
grid.arrange(p1, p2, nrow=1, ncol=2)
p1 <- ggplot(data = data.frame(x = c(0, 100)), aes(x)) +
stat_function(fun = dnorm, n = 100, args = list(mean = 50, sd = 35)) +
labs(y = "", title = "표준편차a < 표준편차b") +
coord_cartesian(ylim=c(0, 0.03)) +
stat_function(fun = dnorm, n = 100, args = list(mean = 50, sd = 15))
p2 <- ggplot(data = data.frame(x = c(0, 100)), aes(x)) +
stat_function(fun = dnorm, n = 100, args = list(mean = 50, sd = 25)) +
labs(y = "", title = "sd: 15") +
coord_cartesian(ylim=c(0, 0.03)) +
stat_function(fun = dnorm, n = 100, args = list(mean = 80, sd = 25))
grid.arrange(p1, p2, nrow=1, ncol=2)
p1 <- ggplot(data = data.frame(x = c(0, 100)), aes(x)) +
stat_function(fun = dnorm, n = 100, args = list(mean = 50, sd = 35)) +
labs(y = "", title = "표준편차a < 표준편차b") +
stat_function(fun = dnorm, n = 100, args = list(mean = 50, sd = 15))
p2 <- ggplot(data = data.frame(x = c(0, 100)), aes(x)) +
stat_function(fun = dnorm, n = 100, args = list(mean = 50, sd = 25)) +
labs(y = "", title = "sd: 15") +
stat_function(fun = dnorm, n = 100, args = list(mean = 80, sd = 25))
grid.arrange(p1, p2, nrow=1, ncol=2)
p1 <- ggplot(data = data.frame(x = c(0, 100)), aes(x)) +
stat_function(fun = dnorm, n = 100, args = list(mean = 50, sd = 35)) +
labs(y = "", title = "평균은 같고 표준편차가 다를때") +
stat_function(fun = dnorm, n = 100, args = list(mean = 50, sd = 15))
p2 <- ggplot(data = data.frame(x = c(0, 100)), aes(x)) +
stat_function(fun = dnorm, n = 100, args = list(mean = 50, sd = 25)) +
labs(y = "", title = "표준편차가 다르고 평균이 같을때") +
stat_function(fun = dnorm, n = 100, args = list(mean = 80, sd = 25))
grid.arrange(p1, p2, nrow=1, ncol=2)
ggplot(data.frame(x=c(-3,3)), aes(x=x)) +
stat_function(fun=dnorm, colour="blue", size=1) +
ggtitle("Normal Distribution")
dnorm_range <- function(x) {
y <- dnorm(x)
y[x < -1.96 | x > 1.96] <- NA  # 이 범위에는 색깔 없음
return(y)
}
ggplot(data.frame(x=c(-3,3)), aes(x=x)) +
stat_function(fun=dnorm, colour="blue", size=1) +
stat_function(fun=dnorm_range, geom = "area", fill="grey", alpha = 0.5) +
ggtitle("Normal Distribution")
runif(1)
runif(1)
runif(1)
runif(1)
runif(1)
sample(x=c(0,1), size = 100)
sample(x=2, size = 100)
sample(x=1:30, size = 100)
sample(x=1:30, size = 100, replace = TRUE)
sample(x=0:1, size = 100, replace = TRUE)
sample(x=c(0:1), size = 100, replace = TRUE)
flip_coin <- sample(x=c(0:1), size = 100, replace = TRUE)
mean(flip_coin)
flip_coin <- sample(x=c(0:1), size = 100, replace = TRUE)
flip_coin
mean(flip_coin)
flip_coin <- sample(x=c(0:1), size = 1000, replace = TRUE)
flip_coin
mean(flip_coin)
flip_coin <- sample(x=c(0:1), size = 1000, replace = TRUE)
flip_coin
mean(flip_coin)
flip_coin <- sample(x=c(0:1), size = 5, replace = TRUE)
flip_coin
mean(flip_coin)
flip_coin <- sample(x=c(0:1), size = 1, replace = TRUE)
flip_coin
mean(flip_coin)
flip_coin <- sample(x=c(0:1), size = 3, replace = TRUE)
flip_coin
mean(flip_coin)
flip_coin <- sample(x=c(0:1), size = 3, replace = TRUE)
flip_coin
mean(flip_coin)
flip_coin <- sample(x=c(0:1), size = 3, replace = TRUE)
flip_coin
mean(flip_coin)
flip_coin <- sample(x=c(0:1), size = 3, replace = TRUE)
flip_coin
mean(flip_coin)
l <- c()
for(x in 1:1000){
flip_coin <- sample(x=c(0:1), size = x, replace = TRUE)
l <- c(l, mean(flip_coin))
}
l
library(ggplot2)
library(gridExtra)
histogram <- ggplot(aes(l))
histogram <- ggplot(l, aes(l))
histogram <- ggplot(data.frame(x = l), aes(x))
histogram + geom_histogram(
binwidth = 1000,
colour="black", fill="blue", alpha = 0.5) +
geom_density(alpha=.2, fill="#6666FF")
histogram <- ggplot(data.frame(x = l), aes(x))
histogram + geom_histogram()
for(x in 1:10000){
flip_coin <- sample(x=c(0:1), size = x, replace = TRUE)
l <- c(l, mean(flip_coin))
}
histogram <- ggplot(data.frame(x = l), aes(x))
histogram + geom_histogram()
histogram <- ggplot(data.frame(x = l), aes(x))
histogram + geom_histogram(binwidth = 0.1,
colour="black", fill="blue", alpha = 0.5) +
geom_density(alpha=.2, fill="#6666FF")
histogram <- ggplot(data.frame(x = l), aes(x))
histogram + geom_histogram(binwidth = 0.025,
colour="black", fill="blue", alpha = 0.5) +
geom_density(alpha=.2, fill="#6666FF")
histogram <- ggplot(data.frame(x = l), aes(x))
histogram + geom_histogram(binwidth = 0.001,
colour="black", fill="blue", alpha = 0.5) +
geom_density(alpha=.2, fill="#6666FF")
histogram <- ggplot(data.frame(x = l), aes(x))
histogram + geom_histogram(binwidth = 0.02,
colour="black", fill="blue", alpha = 0.5) +
geom_density(alpha=.2, fill="#6666FF")
histogram <- ggplot(data.frame(x = l), aes(x))
histogram + geom_histogram(binwidth = 0.02,
colour="black", fill="blue", alpha = 0.5)
for(x in 1:1000){
flip_coin <- sample(x=c(0:1), size = x, replace = TRUE)
l <- c(l, mean(flip_coin))
}
histogram <- ggplot(data.frame(x = l), aes(x))
histogram + geom_histogram(binwidth = 0.02,
colour="black", fill="blue", alpha = 0.5)
for(x in 1:10){
flip_coin <- sample(x=c(0:1), size = x, replace = TRUE)
l <- c(l, mean(flip_coin))
}
histogram <- ggplot(data.frame(x = l), aes(x))
histogram + geom_histogram(binwidth = 0.02,
colour="black", fill="blue", alpha = 0.5)
l <- c()
for(x in 1:10){
flip_coin <- sample(x=c(0:1), size = x, replace = TRUE)
l <- c(l, mean(flip_coin))
}
histogram <- ggplot(data.frame(x = l), aes(x))
histogram + geom_histogram(binwidth = 0.02,
colour="black", fill="blue", alpha = 0.5)
l <- c()
for(x in 1:100){
flip_coin <- sample(x=c(0:1), size = x, replace = TRUE)
l <- c(l, mean(flip_coin))
}
histogram <- ggplot(data.frame(x = l), aes(x))
histogram + geom_histogram(binwidth = 0.02,
colour="black", fill="blue", alpha = 0.5)
l <- c()
for(x in 1:1000){
flip_coin <- sample(x=c(0:1), size = x, replace = TRUE)
l <- c(l, mean(flip_coin))
}
histogram <- ggplot(data.frame(x = l), aes(x))
histogram + geom_histogram(binwidth = 0.02,
colour="black", fill="blue", alpha = 0.5)
l <- c()
yy <- c()
for(x in 1:1000){
flip_coin <- sample(x=c(0:1), size = x, replace = TRUE)
l <- c(l, mean(flip_coin))
yy <- c(yy, x)
}
for(x in 1:10){
flip_coin <- sample(x=c(0:1), size = x, replace = TRUE)
l <- c(l, mean(flip_coin))
yy <- c(yy, x)
}
histogram <- ggplot(data.frame(x = l), aes(x))
histogram + geom_histogram(binwidth = 0.02,
colour="black", fill="blue", alpha = 0.5)
l <- c()
yy <- c()
for(x in 1:10){
flip_coin <- sample(x=c(0:1), size = x, replace = TRUE)
l <- c(l, mean(flip_coin))
yy <- c(yy, x)
}
histogram <- ggplot(data.frame(x = l), aes(x))
histogram + geom_histogram(binwidth = 0.02,
colour="black", fill="blue", alpha = 0.5)
lineplot <- ggplot(data.frame(x = l, y = yy), aes(x, y))
lineplot <- ggplot(data.frame(x = yy, y = x), aes(x, y))
lineplot + geom_line()
lineplot <- ggplot(data.frame(x = yy, y = l), aes(x, y))
lineplot + geom_line()
l <- c()
yy <- c()
for(x in 1:100){
flip_coin <- sample(x=c(0:1), size = x, replace = TRUE)
l <- c(l, mean(flip_coin))
yy <- c(yy, x)
}
histogram <- ggplot(data.frame(x = l), aes(x))
histogram + geom_histogram(binwidth = 0.02,
colour="black", fill="blue", alpha = 0.5)
lineplot <- ggplot(data.frame(x = yy, y = l), aes(x, y))
lineplot + geom_line()
l <- c()
yy <- c()
for(x in 1:1000){
flip_coin <- sample(x=c(0:1), size = x, replace = TRUE)
l <- c(l, mean(flip_coin))
yy <- c(yy, x)
}
histogram <- ggplot(data.frame(x = l), aes(x))
histogram + geom_histogram(binwidth = 0.02,
colour="black", fill="blue", alpha = 0.5)
lineplot <- ggplot(data.frame(x = yy, y = l), aes(x, y))
lineplot + geom_line()
function <- flip_coin(n) {
l <- c()
yy <- c()
for(x in 1:n){
flip_coin <- sample(x=c(0:1), size = x, replace = TRUE)
l <- c(l, mean(flip_coin))
yy <- c(yy, x)
}
histogram <- ggplot(data.frame(x = l), aes(x))
histogram + geom_histogram(binwidth = 0.02,
colour="black", fill="blue", alpha = 0.5)
lineplot <- ggplot(data.frame(x = yy, y = l), aes(x, y))
lineplot + geom_line()
grid.arrange(histogram, lineplot, nrow=2, ncol=1)
}
function <- flip_coin(n) {
l <- c()
yy <- c()
for(x in 1:n){
flip_coin <- sample(x=c(0:1), size = x, replace = TRUE)
l <- c(l, mean(flip_coin))
yy <- c(yy, x)
}
histogram <- ggplot(data.frame(x = l), aes(x))
histogram + geom_histogram(binwidth = 0.02,
colour="black", fill="blue", alpha = 0.5)
lineplot <- ggplot(data.frame(x = yy, y = l), aes(x, y))
lineplot + geom_line()
grid.arrange(histogram, lineplot, nrow=2, ncol=1)
}
function <- flip_coin(n) {
l <- c()
yy <- c()
for(x in 1:n){
flip_coin <- sample(x=c(0:1), size = x, replace = TRUE)
l <- c(l, mean(flip_coin))
yy <- c(yy, x)
}
histogram <- ggplot(data.frame(x = l), aes(x)) +
geom_histogram(binwidth = 0.02,
colour="black", fill="blue", alpha = 0.5)
lineplot <- ggplot(data.frame(x = yy, y = l), aes(x, y)) +geom_line()
return(histogram, lineplot)
}
function <- flip_coin(n) {
l <- c()
yy <- c()
for(x in 1:n){
flip_coin <- sample(x=c(0:1), size = x, replace = TRUE)
l <- c(l, mean(flip_coin))
yy <- c(yy, x)
}
histogram <- ggplot(data.frame(x = l), aes(x)) +
geom_histogram(binwidth = 0.02,
colour="black", fill="blue", alpha = 0.5)
lineplot <- ggplot(data.frame(x = yy, y = l), aes(x, y)) +geom_line()
return(c(histogram, lineplot))
}
flip_coin <- function(n) {
l <- c()
yy <- c()
for(x in 1:n){
flip_coin <- sample(x=c(0:1), size = x, replace = TRUE)
l <- c(l, mean(flip_coin))
yy <- c(yy, x)
}
histogram <- ggplot(data.frame(x = l), aes(x)) +
geom_histogram(binwidth = 0.02,
colour="black", fill="blue", alpha = 0.5)
lineplot <- ggplot(data.frame(x = yy, y = l), aes(x, y)) +geom_line()
return(c(histogram, lineplot))
}
flip_coin_sample <- flip_coin(100)
flip_coin_sample
flip_coin_sample[0]
flip_coin_sample[1]
grid.arrange(flip_coin_sample[1], flip_coin_sample[2], nrow=2, ncol=1)
flip_coin <- function(n) {
l <- c()
yy <- c()
for(x in 1:n){
flip_coin <- sample(x=c(0:1), size = x, replace = TRUE)
l <- c(l, mean(flip_coin))
yy <- c(yy, x)
}
histogram <- ggplot(data.frame(x = l), aes(x)) +
geom_histogram(binwidth = 0.02,
colour="black", fill="blue", alpha = 0.5)
lineplot <- ggplot(data.frame(x = yy, y = l), aes(x, y)) + geom_line()
grid.arrange(histogram, lineplot, nrow=2, ncol=1)
}
flip_coin(100)
flip_coin(10)
flip_coin(50)
flip_coin(10)
flip_coin(50)
flip_coin(100)
flip_coin(1000)
flip_coin(10000)
flip_coin <- function(n) {
l <- c()
yy <- c()
for(x in 1:n){
flip_coin <- sample(x=c(0:1), size = x, replace = TRUE)
l <- c(l, mean(flip_coin))
yy <- c(yy, x)
}
histogram <- ggplot(data.frame(x = l), aes(x)) +
geom_histogram(binwidth = 0.02,
colour="black", fill="blue", alpha = 0.5) +
coord_cartesian(xlim=c(0, 1))
lineplot <- ggplot(data.frame(x = yy, y = l), aes(x, y)) + geom_line()
grid.arrange(histogram, lineplot, nrow=2, ncol=1)
}
flip_coin(10)
flip_coin(50)
flip_coin(100)
flip_coin(1000)
flip_coin(10000)
flip_coin(10)
flip_coin(1000)
sum(y)
x <- c(10000, 1000, 100, 1, 0)
y <- c(1, 5, 15, 180, 99799)
sum(y)
x * y
(x * y) / sum(y)
sum(x * y) / sum(y)
27 / 128
Sys.setlocale(category = "LC_CTYPE", locale = "ko_KR.UTF-8")
theme_set(theme_gray(base_family="AppleGothic"))
par(family = "AppleGothic")
library(ggplot2)
library(gridExtra)
Sys.setlocale(category = "LC_CTYPE", locale = "ko_KR.UTF-8")
theme_set(theme_gray(base_family="AppleGothic"))
par(family = "AppleGothic")
27 / 128
choose(20, 7)
20 * 19 * 6 * 17 * 2
2^2
2^3
choose(20, 7) * (1/4)^7 * (3/4)^3
choose(20, 7) * (1/4)^7 * (3/4)^13
dbinom(7, 20, 1/4)
pnorm(2)
pnorm(2)
pnorm(1.96)
pnorm(1.64)
(1-pnorm(1.96))*2
source('~/work/statistics-R/probability.R', encoding = 'UTF-8', echo=TRUE)
qnorm(0.95)
pnorm(1.96)
qnorm(0.95)
- (22 / 38.73)
b = 34 / 38.73
b
pnorm(b) - pnorm(a)
a = - (22 / 38.73)
pnorm(b) - pnorm(a)
qnorm(95)
qnorm(0.95)
qnorm(0.12)
qnorm(0.88)
pnorm(1.175)
pnorm(1.175) * 7 + 74
pt(8, 0.025)
pt(0.025, 8)
dt(0.025, 8)
dt(8, 0.025)
pt(8, 0.025)
pt(8, 0.05)
pnorm(1.64)
dnorm(1.64)
pnorm(1.64)
pt(8, 0.05)
1 - pt(8, 0.05)
pt(1-0.025, 8)
pt(0.025, 8)
dt(0.025, 8)
dt(0.025, 8)
pt(0.025, 8)
pt(0.025, 8) /2
pt(0.025, 8)
pt(0.025, 7)
pt(0.025, 8)
qt(0.025, 8)
pt(0.025, 8)
qt(1-0.025, 8)
library(ggplot2)
library(gridExtra)
install.packages("ggplot2")
install.packages("gridExtra")
install.packages("Hmisc")
install.packages("extrafont")
install.packages("reshape")
install.packages("dplyr")
library(ggplot2)
library(gridExtra)
Sys.setlocale(category = "LC_CTYPE", locale = "ko_KR.UTF-8")
theme_set(theme_gray(base_family="AppleGothic"))
par(family = "AppleGothic")
setwd("~/work/statistics-R/")
ggplot(data = data.frame(x = c(0, 100)), aes(x)) +
stat_function(fun = dnorm, n = 100, args = list(mean = 0, sd = 1))
ggplot(data.frame(x=c(-3,3)), aes(x=x)) +
stat_function(fun=dnorm, colour="blue", size=1) +
ggtitle("Normal Distribution")
ggplot(data = data.frame(x = c(0, 100)), aes(x)) +
stat_function(fun = dnorm, n = 100, args = list(mean = 50, sd = 25))
ggplot(data = data.frame(x = c(0, 100)), aes(x)) +
stat_function(fun = dnorm, n = 100, args = list(mean = 170, sd = 30))
dnorm(mean = 170, sd=30)
dnorm(x, mean = 170, sd=30)
x
dnorm(100, mean = 170, sd=30)
library(truncnorm)
rtruncnorm(100, mean = 170, sd=30)
ggplot(data = data.frame(x = rtruncnorm(100, mean = 170, sd=30)), aes(x)) + geom_smooth()
ggplot(data = data.frame(x = rtruncnorm(100, mean = 170, sd=30)), aes(x)) + geom_histogram()
ggplot(data = data.frame(x = c(110, 230)), aes(x)) +
stat_function(fun = dnorm, n = 100, args = list(mean = 170, sd = 30))
ggplot(data = data.frame(x = c(110, 230)), aes(x)) +
stat_function(fun = dnorm, n = 100, args = list(mean = 170, sd = 30)) +
geom_hline(yintercept = 175)
ggplot(data = data.frame(x = c(110, 230)), aes(x)) +
stat_function(fun = dnorm, n = 100, args = list(mean = 170, sd = 30)) +
geom_vline(xintercept = 175)
ggplot(data = data.frame(x = c(50, 500)), aes(x)) +
stat_function(fun = dnorm, n = 100, args = list(mean = 170, sd = 30)) +
geom_vline(xintercept = 175)
ggplot(data = data.frame(x = c(0, 300)), aes(x)) +
stat_function(fun = dnorm, n = 100, args = list(mean = 170, sd = 30)) +
geom_vline(xintercept = 175)
ggplot(data = data.frame(x = c(0, 340)), aes(x)) +
stat_function(fun = dnorm, n = 100, args = list(mean = 170, sd = 30)) +
geom_vline(xintercept = 175)
ggplot(data = data.frame(x = c(70, 270)), aes(x)) +
stat_function(fun = dnorm, n = 100, args = list(mean = 170, sd = 30)) +
geom_vline(xintercept = 175)
rtruncnorm(100, mean = 170, sd = 30)
ggplot(data = data.frame(x = rtruncnorm(100, mean = 170, sd = 30)), aes(x)) +
stat_function(fun = dnorm, n = 100, args = list(mean = 170, sd = 30)) +
geom_vline(xintercept = 175)
